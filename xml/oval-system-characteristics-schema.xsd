<?xml version="1.0"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:oval-sc="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:sch="http://purl.oclc.org/dsdl/schematron" targetNamespace="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5" elementFormDefault="qualified" version="5.4">
     <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-common-5" schemaLocation="oval-common-schema.xsd"/>
     <xsd:import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="xmldsig-core-schema.xsd"/>
     <xsd:annotation>
          <xsd:documentation>The following is a description of the elements, types, and attributes that compose the core schema for encoding Open Vulnerability and Assessment Language (OVAL) System Characteristics. The Core System Characteristics Schema defines all operating system independent objects. These objects are extended and enhanced by individual family schemas, which are described in separate documents. Each of the elements, types, and attributes that make up the Core System Characteristics Schema are described in detail and should provide the information necessary to understand what each object represents. This document is intended for developers and assumes some familiarity with XML. A high level description of the interaction between these objects is not outlined here.</xsd:documentation>
          <xsd:documentation>The OVAL Schema is maintained by The MITRE Corporation and developed by the public OVAL Community. For more information, including how to get involved in the project and how to submit change requests, please visit the OVAL website at http://oval.mitre.org.</xsd:documentation>
          <xsd:appinfo>
               <schema>Core System Characteristics</schema>
               <version>5.4</version>
               <date>4/1/2008 10:41:44 AM</date>
                <terms_of_use>Copyright (c) 2002-2008, The MITRE Corporation. All rights reserved.  The contents of this file are subject to the terms of the OVAL License located at http://oval.mitre.org/oval/about/termsofuse.html. See the OVAL License for the specific language governing permissions and limitations for use of this schema.  When distributing copies of the OVAL Schema, this license header must be included.</terms_of_use>
                <sch:title>schematron validation of the Core portion of an OVAL System Characteristics file</sch:title>
               <sch:ns prefix="oval-sc" uri="http://oval.mitre.org/XMLSchema/oval-system-characteristics-5"/>
          </xsd:appinfo>
     </xsd:annotation>
     <!-- =============================================================================== -->
     <!-- =============================================================================== -->
     <!-- =============================================================================== -->
     <xsd:element name="oval_system_characteristics">
          <xsd:annotation>
               <xsd:documentation>The system_characteristics element is the root of an OVAL System Characteristics Document, and must occur exactly once. Its purpose is to bind together the four major sections of a system characteristics file - generator, system_info, collected_objects, and system_data - which are the children of the oval_system_characteristics element.</xsd:documentation>
          </xsd:annotation>
          <xsd:complexType>
               <xsd:sequence>
                    <xsd:element name="generator" type="oval:GeneratorType" minOccurs="1" maxOccurs="1">
                         <xsd:annotation>
                              <xsd:documentation>The generator section must be present and provides information about when the system characteristics file was compiled and under what version.</xsd:documentation>
                         </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="system_info" type="oval-sc:SystemInfoType" minOccurs="1" maxOccurs="1">
                         <xsd:annotation>
                              <xsd:documentation>The required system_info element is used to record information about the system being described.</xsd:documentation>
                         </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="collected_objects" type="oval-sc:CollectedObjectsType" minOccurs="0" maxOccurs="1">
                         <xsd:annotation>
                              <xsd:documentation>The optional collected_objects section is used to associated the ids of the OVAL Objects collected with the system characteristics items that have been defined. The collected_objects section provides a listing of all the objects used to generate this system characteristics file.</xsd:documentation>
                         </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="system_data" type="oval-sc:SystemDataType" minOccurs="0" maxOccurs="1">
                         <xsd:annotation>
                              <xsd:documentation>The optional system_data section defines the specific characteristics that have been collected from the system.</xsd:documentation>
                         </xsd:annotation>
                    </xsd:element>
                    <xsd:element ref="ds:Signature" minOccurs="0" maxOccurs="1">
                         <xsd:annotation>
                              <xsd:documentation>The optional Signature element allows an XML Signature as defined by the W3C to be attached to the document. This allows authentication and data integrity to be provided to the user. Enveloped signatures are supported. More information about the official W3C Recommendation regarding XML digital signatures can be found at http://www.w3.org/TR/xmldsig-core/.</xsd:documentation>
                         </xsd:annotation>
                    </xsd:element>
               </xsd:sequence>
          </xsd:complexType>
          <xsd:key name="objectKey">
               <xsd:annotation>
                    <xsd:documentation>Enforce uniqueness amongst the individual object ids used in the collected object section.</xsd:documentation>
               </xsd:annotation>
               <xsd:selector xpath="oval-sc:collected_objects/oval-sc:object"/>
               <xsd:field xpath="@id"/>
               <xsd:field xpath="@version"/>
               <xsd:field xpath="@variable_instance"/>
          </xsd:key>
          <xsd:key name="itemKey">
               <xsd:annotation>
                    <xsd:documentation>Enforce uniqueness amongst the individual item ids.</xsd:documentation>
               </xsd:annotation>
               <xsd:selector xpath="oval-sc:system_data/*"/>
               <xsd:field xpath="@id"/>
          </xsd:key>
          <xsd:keyref name="itemKeyRef" refer="oval-sc:itemKey">
               <xsd:annotation>
                    <xsd:documentation>Require that each item reference refers to a valid item id.</xsd:documentation>
               </xsd:annotation>
               <xsd:selector xpath="oval-sc:collected_objects/oval-sc:object/oval-sc:reference"/>
               <xsd:field xpath="@item_ref"/>
          </xsd:keyref>
     </xsd:element>
     <!-- =============================================================================== -->
     <!-- =================================  GENERATOR  ================================= -->
     <!-- =============================================================================== -->
     <!--
		The GeneratorType is defined by the oval shared schema.  Please refer to
		that documentation for a description of the complex type.
	 -->
     <!-- =============================================================================== -->
     <!-- ================================  SYSTEM INFO  ================================ -->
     <!-- =============================================================================== -->
     <xsd:complexType name="SystemInfoType">
          <xsd:annotation>
               <xsd:documentation>The SystemInfoType complex type specifies general information about the system that data was collected from, including information that can be used to identify the system. See the description of the InterfacesType complex type for more information. Note that the high level interfaces is required due to the inclusion of the xsd:any tag that follows it. The interfaces tag can be empty if no single interface is present.</xsd:documentation>
               <xsd:documentation>Additional system information is also allowed although it is not part of the official OVAL Schema. Individual organizations can place system information that they feel is important and these will be skipped during the validation. All OVAL really cares about is that the required system information items are there.</xsd:documentation>
          </xsd:annotation>
          <xsd:sequence>
               <xsd:element name="os_name" type="xsd:string" minOccurs="1" maxOccurs="1">
                    <xsd:annotation>
                         <xsd:documentation>The required os_name elements describes the operating system of the machine the data was collected on.</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
               <xsd:element name="os_version" type="xsd:string" minOccurs="1" maxOccurs="1">
                    <xsd:annotation>
                         <xsd:documentation>The required os_version elements describe the operating system version of the machine the data was collected on.</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
               <xsd:element name="architecture" type="xsd:string" minOccurs="1" maxOccurs="1">
                    <xsd:annotation>
                         <xsd:documentation>The required architecture element describes the hardware architecture type of the system data was collected on.</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
               <xsd:element name="primary_host_name" type="xsd:string" minOccurs="1" maxOccurs="1">
                    <xsd:annotation>
                         <xsd:documentation>The required primary_host_name element is the primary host name of the machine the data was collected on.</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
               <xsd:element name="interfaces" type="oval-sc:InterfacesType" minOccurs="1" maxOccurs="1">
                    <xsd:annotation>
                         <xsd:documentation>The required interfaces element outlines the network interfaces that exist on the system.</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
               <xsd:any minOccurs="0" maxOccurs="unbounded" processContents="skip"/>
          </xsd:sequence>
     </xsd:complexType>
     <xsd:complexType name="InterfacesType">
          <xsd:annotation>
               <xsd:documentation>The InterfacesType complex type is a container for zero or more interface elements. Each interface element is used to describe an existing network interface on the system.</xsd:documentation>
          </xsd:annotation>
          <xsd:sequence>
               <xsd:element name="interface" type="oval-sc:InterfaceType" minOccurs="0" maxOccurs="unbounded">
                    <xsd:annotation>
                         <xsd:documentation>Please refer to the description of the InterfaceType for more information.</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
          </xsd:sequence>
     </xsd:complexType>
     <xsd:complexType name="InterfaceType">
          <xsd:annotation>
               <xsd:documentation>The InterfaceType complex type is used to describe an existing network interface on the system. This information can help identify a specific system on a given network.</xsd:documentation>
          </xsd:annotation>
          <xsd:sequence>
               <xsd:element name="interface_name" type="xsd:string" minOccurs="1" maxOccurs="1">
                    <xsd:annotation>
                         <xsd:documentation>The required interface_name element is the name of the interface</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
               <xsd:element name="ip_address" type="xsd:string" minOccurs="1" maxOccurs="1">
                    <xsd:annotation>
                         <xsd:documentation>The reqired ip_address element holds the ip address for the interface.</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
               <xsd:element name="mac_address" type="xsd:string" minOccurs="1" maxOccurs="1">
                    <xsd:annotation>
                         <xsd:documentation>The required mac_address element holds teh mac address for the interface.</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
          </xsd:sequence>
     </xsd:complexType>
     <!-- =============================================================================== -->
     <!-- =============================  COLLECTED OBJECTS  ============================= -->
     <!-- =============================================================================== -->
     <xsd:complexType name="CollectedObjectsType">
          <xsd:annotation>
               <xsd:documentation>The CollectedObjectsType complex type states all the objects that have been collected by the system characteristics file. The details of each object are defined by the global OVAL object that is identified by the id.</xsd:documentation>
          </xsd:annotation>
          <xsd:sequence>
               <xsd:element name="object" type="oval-sc:ObjectType" minOccurs="1" maxOccurs="unbounded"/>
          </xsd:sequence>
     </xsd:complexType>
     <xsd:complexType name="ObjectType">
          <xsd:annotation>
               <xsd:documentation>The ObjectType complex type provides a reference between items collected and a related global OVAL Object.</xsd:documentation>
               <xsd:documentation>If an OVAL Object does not exist on the system, then an object element is still provided but with the flag attribute set to 'does not exist' and with no reference child elements. This shows that the object was looked for but not found on the system. If no object element is written in this case, users of the system characteristics file will not know whether the object was not found or no attempt was made to collect it.</xsd:documentation>
               <xsd:documentation>The required id attribute is the id of the global OVAL Object. The required version attribute is the specific version of the global OVAL Object that was used by the data collection engine. The version is necessary so that analysis using a system characteristics file knows exactly what was collected. The optional variable_instance identifier is a unique id that differentiates every unique instance of an object. Languages that include OVAL might reference the same definition multiple times. Each time a different set of values is supplied for the variables, resulting in multiple instances of an object to be defined by the OVAL System Characteristics file. (definitions that do not use variables can only have one unique instance) The inclusion of a unique instance identifier will allow the OVAL results file to report the correct item associated with an object for each combination of supplied values. The optional comment attribute provides a short description of the object. The required flag attribute holds information regarding the success of the data collection. For example, if there was an error looking for items that match the object specification, then the flag would be 'error'. Please refer to the description of FlagEnumeration for details about the different flag values.</xsd:documentation>
          </xsd:annotation>
          <xsd:sequence>
               <xsd:element name="message" type="oval:MessageType" minOccurs="0" maxOccurs="unbounded">
                    <xsd:annotation>
                         <xsd:documentation>The optional message element holds an error message or some other string that the data collection engine wishes to pass along.</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
               <xsd:element name="variable_value" type="oval-sc:VariableValueType" minOccurs="0" maxOccurs="unbounded">
                    <xsd:annotation>
                         <xsd:documentation>The optional variable_value elements define the actual value(s) used during data collection of any variable referenced by the object (as well as any object referenced via a set element). An OVAL Object that includes a variable maybe have a different set of matching items depending on the value given assigned to the variable. A tool that is given an OVAL System Characteristics file in order to analyze an OVAL Definition needs to be able to determine the exact instance of an object to use based on the variable values supplied. If a variable represents an array of values, then multiple variable_value elements would exist with the same variable_id attribute. </xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
               <xsd:element name="reference" type="oval-sc:ReferenceType" minOccurs="0" maxOccurs="unbounded">
                    <xsd:annotation>
                         <xsd:documentation>the optional reference element links the collected item found by the data collection engine and the global OVAL Object. A global OVAL Object my have multiple matching items on a system. For example a global file object that is a pattern match might match 10 different files on a specific system. In this case, there would be 10 reference elements, one for each of the files found on the system.</xsd:documentation>
                    </xsd:annotation>
               </xsd:element>
          </xsd:sequence>
          <xsd:attribute name="id" type="oval:ObjectIDPattern" use="required"/>
          <xsd:attribute name="version" type="xsd:nonNegativeInteger" use="required"/>
          <xsd:attribute name="variable_instance" type="xsd:integer" use="optional" default="1"/>
          <xsd:attribute name="comment" type="xsd:string" use="optional"/>
          <xsd:attribute name="flag" type="oval-sc:FlagEnumeration" use="required"/>
     </xsd:complexType>
     <xsd:complexType name="VariableValueType">
          <xsd:annotation>
               <xsd:documentation>The VariableValueType complex type holds the value to a variable used during the collection of an object. The required variable_id attribute is the unique id of the variable being identified.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:extension base="xsd:anySimpleType">
                    <xsd:attribute name="variable_id" type="oval:VariableIDPattern" use="required"/>
               </xsd:extension>
          </xsd:simpleContent>
     </xsd:complexType>
     <xsd:complexType name="ReferenceType">
          <xsd:annotation>
               <xsd:documentation>The ReferenceType complex type specifies an item in the system characteristics file. This reference is used to link global OVAL Objects to specific items.</xsd:documentation>
          </xsd:annotation>
          <xsd:attribute name="item_ref" type="oval:ItemIDPattern" use="required"/>
     </xsd:complexType>
     <!-- =============================================================================== -->
     <!-- ================================  SYSTEM DATA  ================================ -->
     <!-- =============================================================================== -->
     <xsd:complexType name="SystemDataType">
          <xsd:annotation>
               <xsd:documentation>The SystemDataType complex type is a container for one or more item elements. Each item defines a specific piece of data on the system.</xsd:documentation>
          </xsd:annotation>
          <xsd:sequence>
               <xsd:element ref="oval-sc:item" minOccurs="1" maxOccurs="unbounded"/>
          </xsd:sequence>
     </xsd:complexType>
     <xsd:element name="item" type="oval-sc:ItemType" abstract="true">
          <xsd:annotation>
               <xsd:documentation>The abstract item element holds information about a specific item on a system. An item might be a file, a rpm, a process, etc. This element is extended by the different component schemas through substitution groups. Each item represents a unique instance of an object as specified by an OVAL Object. For example, a single file or a single user. Each item my be referenced by more than one object in the collected object section. Please refer to the description of ItemType for more details about the information stored in items.</xsd:documentation>
          </xsd:annotation>
     </xsd:element>
     <xsd:complexType name="ItemType">
          <xsd:annotation>
               <xsd:documentation>The ItemType complex type specifies an optional message element that is used to pass things like error messages during data collection to a tool that will utilize the information. The required id attribute is an unique (to the file) identifier that allows the specific item to be referenced. The optional object_ref attribute allows the item to be linked to an object declaration used to identify the item being collected. The required status attribute holds information regarding the success of the data collection. For example, if an item exists on the system then the status would reflect this with a value of 'exists'. If there was an error collecting a any information about an item that is known to exist, then the status would be 'error'. An error specific to a particular entity should be addressed at the entity level and not the item level. Note that an item should not have a status of 'does not exist' as there simply would be no item element in the system characteristics file for this case. If part of the object declaration does not exist on the system (say a path exists but the filename does not), then no item should be written for this object and the object element in the collected_object section should have a flag value of 'does not exist'.</xsd:documentation>
          </xsd:annotation>
          <xsd:sequence>
               <xsd:element name="message" type="oval:MessageType" minOccurs="0" maxOccurs="1"/>
          </xsd:sequence>
          <xsd:attribute name="id" type="oval:ItemIDPattern" use="required"/>
          <xsd:attribute name="status" type="oval-sc:StatusEnumeration" use="optional" default="exists"/>
     </xsd:complexType>
     <!-- =============================================================================== -->
     <!-- =================================  SIGNATURE  ================================= -->
     <!-- =============================================================================== -->
     <!--
		The signature element is defined by the xmldsig schema.  Please refer to that
		documentation for a description of the valid elements and types.  More
		information about the official W3C Recommendation regarding XML digital
		signatures can be found at http://www.w3.org/TR/xmldsig-core/.
	-->
     <!-- =============================================================================== -->
     <!-- ===============================  ENUMERATIONS  ================================ -->
     <!-- =============================================================================== -->
     <xsd:simpleType name="FlagEnumeration">
          <xsd:annotation>
               <xsd:documentation>The FlagEnumeration simple type defines the valid flags associated with a collected object. These flags are meant to provide information about how the specified object was handled by the data collector. In order to evaluate an OVAL Definition, information about the defined objects need to be available. The flags help detail the success of trying to collect information related to these objects.</xsd:documentation>
          </xsd:annotation>
          <xsd:restriction base="xsd:string">
               <xsd:enumeration value="error">
                    <xsd:annotation>
                         <xsd:documentation>A flag of 'error' says that there was an error trying to identify objects on the system that match the specified object declaration. This flag is not meant to be used when there was an error retrieving a specific attribute, but rather when it could not be determined if an instance of the object exists or not. Any error in retrieving specific attributes should be represented by setting the status of that specific attribute to 'error'.</xsd:documentation>
                    </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="complete">
                    <xsd:annotation>
                         <xsd:documentation>Every matching item on the system has been identified and is represented in the system characteristics file. It can be assumed that no additional matching items exist on the system.</xsd:documentation>
                    </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="incomplete">
                    <xsd:annotation>
                         <xsd:documentation>An instance of the specified object exists on the system, but only some of the matching items have been identified and are represented in the system characteristics file. It is unknown if additional matching items also exist. Note that with a flag of incomplete, each item that has been identified matches the object declaration, but additional items might also exist on the system.</xsd:documentation>
                    </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="does not exist">
                    <xsd:annotation>
                         <xsd:documentation>A flag of 'does not exist' means that the underlying structure is installed on the system but no matching item was found.  For example, the Windows metabase is installed but the specified metabase_object could not be found.  In this example, if the metabase itself was not installed, then the flag would have been 'not applicable'.</xsd:documentation>
                    </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="not collected">
                    <xsd:annotation>
                         <xsd:documentation>An attempt to collect information on items matching the object was not made. An object with this flag will produce an 'unknown' result during analysis since it is unknown if a matching items exists on the system or not. This is different from an 'error' flag since with an 'error' flag an attempt to collect information was made. With the 'not collected' flag, no attempt was made.</xsd:documentation>
                    </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="not applicable">
                    <xsd:annotation>
                         <xsd:documentation>The specified object is not applicable to the system being characterized.  This could be because the data repository is not installed or that the object structure is for a different flavor of systems. An example would be trying to collect objects related to a Red Hat system off a Windows system.  Another example would be trying to collect an rpminfo object on a Linux system if the rpm packaging system is not installed.  If the rpm packaging system is installed and the specified rpminfo object could not be found, then the flag would be 'does not exist'.</xsd:documentation>
                    </xsd:annotation>
               </xsd:enumeration>
          </xsd:restriction>
     </xsd:simpleType>
     <xsd:simpleType name="StatusEnumeration">
          <xsd:annotation>
               <xsd:documentation>The StatusEnumeration simple type defines the valid status messages associated with collection of specific information associated with an item.</xsd:documentation>
          </xsd:annotation>
          <xsd:restriction base="xsd:string">
               <xsd:enumeration value="error">
                    <xsd:annotation>
                         <xsd:documentation>A status of 'error' says that there was an error collecting information associated with an item as a whole or a specific entity.</xsd:documentation>
                    </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="exists">
                    <xsd:annotation>
                         <xsd:documentation>A status of 'exists' says that the item or specific piece of information exists on the system and has been collected.</xsd:documentation>
                    </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="does not exist">
                    <xsd:annotation>
                         <xsd:documentation>A status of 'does not exist' says that the item or specific piece of information does not exist and therefore has not been collected. This status assumes that an attempt was made to collect the information, but the information just doesn't exist. This can happen when a certain entity is only pertinent to particular instances, or when xsi:nil is used to refer to a higher level object.</xsd:documentation>
                    </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="not collected">
                    <xsd:annotation>
                         <xsd:documentation>A status of 'not collected' says that no attempt was made to collect the item or specific piece of information so it is unknown what the value is and if it even exists.</xsd:documentation>
                    </xsd:annotation>
               </xsd:enumeration>
          </xsd:restriction>
     </xsd:simpleType>
     <!-- =============================================================================== -->
     <!-- ===============================  ENTITY TYPES  ================================ -->
     <!-- =============================================================================== -->
     <xsd:complexType name="EntityItemBaseType" abstract="true">
          <xsd:annotation>
               <xsd:documentation>The EntityItemBaseType complex type is an abstract type that defines the default attributes associated with every entity.  The optional datatype determines the type of data expected. (the default datatype is 'string')  Note that the datatype attribute simply defines the type of data as found on the system, it is not used during evaluation.  An OVAL Definition defines how the data should be interpreted during analysis.  If the definition states a datatype that is different than what the system characteristics presents, then a type cast must be made.  The optional mask attribute is used to identify values that have been hidden for sensitivity concerns.  This is used by the result file which uses the system characateristic schema to format the information found on a specific system.  If the original definition set the mask attribute of an entity to 'true', then value obtained from the system should not be presented in the results file.  A system characteristics file that is not held within a results file should not use the mask attribute.  The optional status attribute holds information regarding the success of the data collection.  For example, if there was an error collecting a particular piece of data, then the status would be 'error'.</xsd:documentation>
               <xsd:appinfo>
                    <sch:pattern id="entitystatus">
                         <sch:rule context="oval-sc:system_data/*/*">
                              <sch:assert test="not(@status) or @status='exists' or .=''">item <sch:value-of select="../@id"/> - a value for the <sch:value-of select="name()"/> entity should only be supplied if the status attribute is 'exists'</sch:assert>
                              <sch:assert test="not(@mask) or @mask='false' or .=''">item <sch:value-of select="../@id"/> - a value for the <sch:value-of select="name()"/> entity should only be supplied if the mask attribute is 'false'</sch:assert>
                         </sch:rule>
                    </sch:pattern>
               </xsd:appinfo>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:extension base="xsd:anySimpleType">
                    <xsd:attribute name="datatype" type="oval:DatatypeEnumeration" use="optional" default="string"/>
                    <xsd:attribute name="mask" type="xsd:boolean" use="optional" default="false"/>
                    <xsd:attribute name="status" type="oval-sc:StatusEnumeration" use="optional" default="exists"/>
               </xsd:extension>
          </xsd:simpleContent>
     </xsd:complexType>
     <xsd:complexType name="EntityItemAnyType">
          <xsd:annotation>
               <xsd:documentation>The EntityItemAnyType type is extended by the entities of an individual item. This type provides uniformity to each entity by including the attributes found in the EntityItemBaseType. This specific type describes any simple data.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:extension base="oval-sc:EntityItemBaseType"/>
          </xsd:simpleContent>
     </xsd:complexType>
     <xsd:complexType name="EntityItemBinaryType">
          <xsd:annotation>
               <xsd:documentation>The EntityItemBinaryType type is extended by the entities of an individual item. This type provides uniformity to each entity by including the attributes found in the EntityItemBaseType. This specific type describes simple binary data. The empty string is also allowed for cases where there was an error in the data collection of an entity and a status needs to be reported.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:restriction base="oval-sc:EntityItemBaseType">
                    <xsd:simpleType>
                         <xsd:union memberTypes="xsd:hexBinary oval:EmptyStringType"/>
                    </xsd:simpleType>
               </xsd:restriction>
          </xsd:simpleContent>
     </xsd:complexType>
     <xsd:complexType name="EntityItemBoolType">
          <xsd:annotation>
               <xsd:documentation>The EntityItemBoolType type is extended by the entities of an individual item. This type provides uniformity to each entity by including the attributes found in the EntityItemBaseType. This specific type describes simple boolean data. The empty string is also allowed for cases where there was an error in the data collection of an entity and a status needs to be reported.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:restriction base="oval-sc:EntityItemBaseType">
                    <xsd:simpleType>
                         <xsd:union memberTypes="xsd:boolean oval:EmptyStringType"/>
                    </xsd:simpleType>
               </xsd:restriction>
          </xsd:simpleContent>
     </xsd:complexType>
     <xsd:complexType name="EntityItemFloatType">
          <xsd:annotation>
               <xsd:documentation>The EntityItemFloatType type is extended by the entities of an individual item. This type provides uniformity to each entity by including the attributes found in the EntityItemBaseType. This specific type describes simple float data. The empty string is also allowed for cases where there was an error in the data collection of an entity and a status needs to be reported.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:restriction base="oval-sc:EntityItemBaseType">
                    <xsd:simpleType>
                         <xsd:union memberTypes="xsd:float oval:EmptyStringType"/>
                    </xsd:simpleType>
               </xsd:restriction>
          </xsd:simpleContent>
     </xsd:complexType>
     <xsd:complexType name="EntityItemIntType">
          <xsd:annotation>
               <xsd:documentation>The EntityItemIntType type is extended by the entities of an individual item. This type provides uniformity to each entity by including the attributes found in the EntityItemBaseType. This specific type describes simple integer data. The empty string is also allowed for cases where there was an error in the data collection of an entity and a status needs to be reported.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:restriction base="oval-sc:EntityItemBaseType">
                    <xsd:simpleType>
                         <xsd:union memberTypes="xsd:integer oval:EmptyStringType"/>
                    </xsd:simpleType>
               </xsd:restriction>
          </xsd:simpleContent>
     </xsd:complexType>
     <xsd:complexType name="EntityItemStringType">
          <xsd:annotation>
               <xsd:documentation>The EntityItemStringType type is extended by the entities of an individual item. This type provides uniformity to each entity by including the attributes found in the EntityItemBaseType. This specific type describes simple string data.</xsd:documentation>
          </xsd:annotation>
          <xsd:simpleContent>
               <xsd:restriction base="oval-sc:EntityItemBaseType">
                    <xsd:simpleType>
                         <xsd:restriction base="xsd:string"/>
                    </xsd:simpleType>
               </xsd:restriction>
          </xsd:simpleContent>
     </xsd:complexType>
</xsd:schema>
