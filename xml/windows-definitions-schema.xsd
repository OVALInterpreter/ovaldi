<?xml version="1.0"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:win-def="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows" xmlns:sch="http://purl.oclc.org/dsdl/schematron" targetNamespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows" elementFormDefault="qualified" version="5.5">
      <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-common-5" schemaLocation="oval-common-schema.xsd"/>
      <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5" schemaLocation="oval-definitions-schema.xsd"/>
      <xsd:annotation>
            <xsd:documentation>The following is a description of the elements, types, and attributes that compose the Windows specific tests found in Open Vulnerability and Assessment Language (OVAL). Each test is an extension of the standard test element defined in the Core Definition Schema. Through extension, each test inherits a set of elements and attributes that are shared amongst all OVAL tests. Each test is described in detail and should provide the information necessary to understand what each element and attribute represents. This document is intended for developers and assumes some familiarity with XML. A high level description of the interaction between the different tests and their relationship to the Core Definition Schema is not outlined here.</xsd:documentation>
            <xsd:documentation>The OVAL Schema is maintained by The Mitre Corporation and developed by the public OVAL Community. For more information, including how to get involved in the project and how to submit change requests, please visit the OVAL website at http://oval.mitre.org.</xsd:documentation>
            <xsd:appinfo>
                  <schema>Windows Definition</schema>
                  <version>5.5</version>
                  <date>9/26/2008 7:31:01 AM</date>
                  <terms_of_use>Copyright (c) 2002-2008, The MITRE Corporation. All rights reserved.  The contents of this file are subject to the terms of the OVAL License located at http://oval.mitre.org/oval/about/termsofuse.html. See the OVAL License for the specific language governing permissions and limitations for use of this schema.  When distributing copies of the OVAL Schema, this license header must be included.</terms_of_use>
                  <sch:ns prefix="oval-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5"/>
                  <sch:ns prefix="win-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5#windows"/>
                  <sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
                  <sch:pattern id="affected_platform">
                        <sch:rule context="oval-def:affected[@family='windows']">
                              <sch:assert test="not(oval-def:platform) or oval-def:platform='Microsoft Windows 95' or oval-def:platform='Microsoft Windows 98' or oval-def:platform='Microsoft Windows ME' or oval-def:platform='Microsoft Windows NT' or oval-def:platform='Microsoft Windows 2000' or oval-def:platform='Microsoft Windows XP' or oval-def:platform='Microsoft Windows Server 2003' or oval-def:platform='Microsoft Windows Vista' or oval-def:platform='Microsoft Windows Server 2008'">
                                    <sch:value-of select="../../@id"/> - the value "<sch:value-of select="oval-def:platform"/>" found in platform element as part of the affected element is not a valid windows platform.</sch:assert>
                        </sch:rule>
                  </sch:pattern>
            </xsd:appinfo>
      </xsd:annotation>
      <!-- =============================================================================== -->
      <!-- ============================  ACCESS TOKEN TEST   ============================= -->
      <!-- =============================================================================== -->
      <xsd:element name="accesstoken_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The access token test is used to check the properties of a Windows' access token as well as individual privileges and rights associated with it. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an accesstoken_object and the optional state element specifies the data to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="attst">
                              <sch:rule context="win-def:accesstoken_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:accesstoken_object/@id"><sch:value-of select="../@id"/> - the object child element of an accesstoken_test must reference an accesstoken_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:accesstoken_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:accesstoken_state/@id"><sch:value-of select="../@id"/> - the state child element of an accesstoken_test must reference an accesstoken_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="accesstoken_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The accesstoken_object element is used by an access token test to define the object to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
                  <xsd:documentation>An access token object consists of a single security principle that identifies user, group, or compter account that is associated with the token.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set"/>
                                          <xsd:sequence>
                                                <xsd:element name="behaviors" type="win-def:AccesstokenBehaviors" minOccurs="0"/>
                                                <xsd:element name="security_principle" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The security_principle element defines the access token being specified. Security principals include users or groups with either local or domain accounts, and computer accounts created when a computer running Windows NT, Windows 2000, Windows XP, or a member of the Windows Server 2003 family joins a domain. User rights and permissions to access objects such as Active Directory objects, files, and registry settings are assigned to security principals. In a domain environment, security principals should be identified in the form: "domain\trustee name" For local security principals use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in security principals should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="atobjsecurity_principle">
                                                                        <sch:rule context="win-def:accesstoken_object/win-def:security_principle">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the security_principle entity of an accesstoken_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="accesstoken_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The accesstoken_state element defines the different information that can be used to evaluate the specified access tokens. This includes the multitude of user rights and permissions that can be granted. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="security_principle" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The security_principle element identifies an access token to test for. Security principals include users or groups with either local or domain accounts, and computer accounts created when a computer running Windows NT, Windows 2000, Windows XP, or a member of the Windows Server 2003 family joins a domain. User rights and permissions to access objects such as Active Directory objects, files, and registry settings are assigned to security principals. In a domain environment, security principals should be identified in the form: "domain\trustee name" For local security principals use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in security principals should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesecurity_principle">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:security_principle">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the security_principle entity of an accesstoken_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seassignprimarytokenprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seassignprimarytokenprivilege privilege is enabled, it allows a parent process to replace the access token that is associated with a child process.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseassignprimarytokenprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seassignprimarytokenprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seassignprimarytokenprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seauditprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seauditprivilege privilege is enabled, it allows a process to generate audit records in the security log. The security log can be used to trace unauthorized system access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseauditprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seauditprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seauditprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sebackupprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the sebackupprivilege privilege is enabled, it allows the user to circumvent file and directory permissions to back up the system. The privilege is selected only when an application attempts access by using the NTFS backup application programming interface (API). Otherwise, normal file and directory permissions apply.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesebackupprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sebackupprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sebackupprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sechangenotifyprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the sechangenotifyprivilege privilege is enabled, it allows the user to pass through folders to which the user otherwise has no access while navigating an object path in the NTFS file system or in the registry. This privilege does not allow the user to list the contents of a folder; it allows the user only to traverse its directories.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesechangenotifyprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sechangenotifyprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sechangenotifyprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="secreateglobalprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the secreateglobalprivilege privilege is enabled, it allows the user to create named file mapping objects in the global namespace during Terminal Services sessions.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesecreateglobalprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:secreateglobalprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the secreateglobalprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="secreatepagefileprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the secreatepagefileprivilege privilege is enabled, it allows the user to create and change the size of a pagefile.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesecreatepagefileprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:secreatepagefileprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the secreatepagefileprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="secreatepermanentprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the secreatepermanentprivilege privilege is enabled, it allows a process to create a directory object in the object manager. It is useful to kernel-mode components that extend the object namespace. Components that are running in kernel mode have this privilege inherently.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesecreatepermanentprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:secreatepermanentprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the secreatepermanentprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="secreatesymboliclinkprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the secreatesymboliclinkprivilege privilege is enabled, it allows users to create symbolic links. This is new for Vista.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesecreatesymboliclinkprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:secreatesymboliclinkprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the secreatesymboliclinkprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="secreatetokenprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the secreatetokenprivilege privilege is enabled, it allows a process to create an access token by calling NtCreateToken() or other token-creating APIs.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesecreatetokenprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:secreatetokenprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the secreatetokenprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sedebugprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the sedebugprivilege privilege is enabled, it allows the user to attach a debugger to any process. It provides access to sensitive and critical operating system components.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesedebugprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sedebugprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sedebugprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seenabledelegationprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seenabledelegationprivilege privilege is enabled, it allows the user to change the Trusted for Delegation setting on a user or computer object in Active Directory. The user or computer that is granted this privilege must also have write access to the account control flags on the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseenabledelegationprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seenabledelegationprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seenabledelegationprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seimpersonateprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seimpersonateprivilege privilege is enabled, it allows the user to impersonate a client after authentication. It is not supported on Windows XP, Windows 2000 SP3 and earlier, or Windows NT.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseimpersonateprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seimpersonateprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seimpersonateprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seincreasebasepriorityprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seincreasebasepriorityprivilege privilege is enabled, it allows a user to increase the base priority class of a process.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseincreasebasepriorityprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seincreasebasepriorityprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seincreasebasepriorityprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seincreasequotaprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seincreasequotaprivilege privilege is enabled, it allows a process that has access to a second process to increase the processor quota assigned to the second process.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseincreasequotaprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seincreasequotaprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seincreasequotaprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seincreaseworkingsetprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seincreaseworkingsetprivilege privilege is enabled, it allows a user to increase a process working set. This is new for Vista.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseincreaseworkingsetprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seincreaseworkingsetprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seincreaseworkingsetprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seloaddriverprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seloaddriverprivilege privilege is enabled, it allows a user to install and remove drivers for Plug and Play devices.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseloaddriverprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seloaddriverprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seloaddriverprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="selockmemoryprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the selockmemoryprivilege privilege is enabled, it allows a process to keep data in physical memory, which prevents the system from paging the data to virtual memory on disk.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteselockmemoryprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:selockmemoryprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the selockmemoryprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="semachineaccountprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the semachineaccountprivilege privilege is enabled, it allows the user to add a computer to a specific domain.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesemachineaccountprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:semachineaccountprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the semachineaccountprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="semanagevolumeprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the semanagevolumeprivilege privilege is enabled, it allows a non-administrative or remote user to manage volumes or disks.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesemanagevolumeprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:semanagevolumeprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the semanagevolumeprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seprofilesingleprocessprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seprofilesingleprocessprivilege privilege is enabled, it allows a user to sample the performance of an application process.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseprofilesingleprocessprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seprofilesingleprocessprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seprofilesingleprocessprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="serelabelprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the serelabelprivilege privilege is enabled, it allows a user to modify an object label. This user right is new for Vista.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteserelabelprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:serelabelprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the serelabelprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seremoteshutdownprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seremoteshutdownprivilege privilege is enabled, it allows a user to shut down a computer from a remote location on the network. </xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseremoteshutdownprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seremoteshutdownprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seremoteshutdownprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="serestoreprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the serestoreprivilege privilege is enabled, it allows a user to circumvent file and directory permissions when restoring backed-up files and directories and to set any valid security principal as the owner of an object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteserestoreprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:serestoreprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the serestoreprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sesecurityprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the sesecurityprivilege privilege is enabled, it allows a user to specify object access auditing options for individual resources such as files, Active Directory objects, and registry keys. A user who has this privilege can also view and clear the security log from Event Viewer.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesesecurityprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sesecurityprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sesecurityprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seshutdownprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seshutdownprivilege privilege is enabled, it allows a user to shut down the local computer.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseshutdownprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seshutdownprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seshutdownprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sesyncagentprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the sesyncagentprivilege privilege is enabled, it allows a process to read all objects and properties in the directory, regardless of the protection on the objects and properties. It is required in order to use Lightweight Directory Access Protocol (LDAP) directory synchronization (Dirsync) services.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesesyncagentprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sesyncagentprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sesyncagentprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sesystemenvironmentprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the sesystemenvironmentprivilege privilege is enabled, it allows modification of system environment variables either by a process through an API or by a user through System Properties.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesesystemenvironmentprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sesystemenvironmentprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sesystemenvironmentprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sesystemprofileprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the sesystemprofileprivilege privilege is enabled, it allows a user to sample the performance of system processes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesesystemprofileprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sesystemprofileprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sesystemprofileprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sesystemtimeprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the sesystemtimeprivilege privilege is enabled, it allows the user to adjust the time on the computer's internal clock. It is not required to change the time zone or other display characteristics of the system time.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesesystemtimeprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sesystemtimeprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sesystemtimeprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="setakeownershipprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the setakeownershipprivilege privilege is enabled, it allows a user to take ownership of any securable object in the system, including Active Directory objects, NTFS files and folders, printers, registry keys, services, processes, and threads.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesetakeownershipprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:setakeownershipprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the setakeownershipprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="setcbprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the setcbprivilege privilege is enabled, it allows a process to assume the identity of any user and thus gain access to the resources that the user is authorized to access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesetcbprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:setcbprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the setcbprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="setimezoneprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the setimezoneprivilege privilege is enabled, it allows the user to change the time zone. This is new for Vista.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesetimezoneprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:setimezoneprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the setimezoneprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seundockprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seundockprivilege privilege is enabled, it allows the user of a portable computer to undock the computer by clicking Eject PC on the Start menu.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseundockprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seundockprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seundockprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seunsolicitedinputprivilege" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If the seunsolicitedinputprivilege privilege is enabled, it allows the user to read unsolicited data from a terminal device.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseunsolicitedinputprivilege">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seunsolicitedinputprivilege">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seunsolicitedinputprivilege entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sebatchlogonright" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If an account is assigned the sebatchlogonright right, it can log on using the batch logon type.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesebatchlogonright">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sebatchlogonright">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sebatchlogonright entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seinteractivelogonright" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If an account is assigned the seinteractivelogonright right, it can log on using the interactive logon type.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseinteractivelogonright">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seinteractivelogonright">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seinteractivelogonright entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="senetworklogonright" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If an account is assigned the senetworklogonright right, it can log on using the network logon type.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesenetworklogonright">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:senetworklogonright">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the senetworklogonright entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seremoteinteractivelogonright" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If an account is assigned the seremoteinteractivelogonright right, it can log on to the computer by using a Remote Desktop connection.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseremoteinteractivelogonright">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seremoteinteractivelogonright">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seremoteinteractivelogonright entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="seservicelogonright" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If an account is assigned the seservicelogonright right, it can log on using the service logon type.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atsteseservicelogonright">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:seservicelogonright">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the seservicelogonright entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sedenybatchLogonright" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If an account is assigned the sedenybatchLogonright right, it is explicitly denied the ability to log on using the batch logon type.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesedenybatchLogonright">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sedenybatchLogonright">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sedenybatchLogonright entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sedenyinteractivelogonright" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If an account is assigned the sedenyinteractivelogonright right, it is explicitly denied the ability to log on using the interactive logon type.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesedenyinteractivelogonright">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sedenyinteractivelogonright">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sedenyinteractivelogonright entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sedenynetworklogonright" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If an account is assigned the sedenynetworklogonright right, it is explicitly denied the ability to log on using the network logon type.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesedenynetworklogonright">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sedenynetworklogonright">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sedenynetworklogonright entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sedenyremoteInteractivelogonright" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If an account is assigned the sedenyremoteInteractivelogonright right, it is explicitly denied the ability to log on through Terminal Services.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesedenyremoteInteractivelogonright">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sedenyremoteInteractivelogonright">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sedenyremoteInteractivelogonright entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sedenyservicelogonright" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>If an account is assigned the sedenyservicelogonright right, it is explicitly denied the ability to log on using the service logon type.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="atstesedenyservicelogonright">
                                                            <sch:rule context="win-def:accesstoken_state/win-def:sedenyservicelogonright">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the sedenyservicelogonright entity of an accesstoken_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="AccesstokenBehaviors">
            <xsd:annotation>
                  <xsd:documentation>These behaviors allow a more detailed definition of the accesstoken_object being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true">
                  <xsd:annotation>
                        <xsd:documentation>If a group security principle is specified, this behavior specifies whether to include the group or not. For example, maybe you want to check the access tokens associated with every user within a group, but not the group itself. In this case, you would set the include_group behavior to 'false'. If the security_principle is not a group, then this behavior should be ignored.</xsd:documentation>
                  </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false">
                  <xsd:annotation>
                        <xsd:documentation>If a group security principle is specified, this behavior specifies whether to resolve the group into its list of users. For example, to check the access tokens of every user in a group, you could specify the group security_principle and then set the resolve_group behavior to 'true'. If the security_principle is not a group, then this behavior should be ignored.</xsd:documentation>
                  </xsd:annotation>
            </xsd:attribute>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ===========================  ACTIVE DIRECTORY TEST  =========================== -->
      <!-- =============================================================================== -->
      <xsd:element name="activedirectory_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The active directory test is used to check information about specific entries in active directory. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an activedirectory_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="adtst">
                              <sch:rule context="win-def:activedirectory_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:activedirectory_object/@id"><sch:value-of select="../@id"/> - the object child element of an activedirectory_test must reference an activedirectory_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:activedirectory_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:activedirectory_state/@id"><sch:value-of select="../@id"/> - the state child element of an activedirectory_test must reference an activedirectory_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="activedirectory_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The activedirectory_object element is used by an active directory test to define those objects to evaluated based on a specified state. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
                  <xsd:documentation>An active directory object consists of three pieces of information, a naming context, a relative distinguished name, and an attribute. Each piece helps identify a specific active directory entry.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set"/>
                                          <xsd:sequence>
                                                <xsd:element name="naming_context" type="win-def:EntityObjectNamingContextType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>Each object in active directory exists under a certain naming context (also known as a partition). A naming context is defined as a single object in the Directory Information Tree (DIT) along with every object in the tree subordinate to it. There are three default naming contexts in Active Directory: domain, configuration, and schema.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="adobjnaming_context">
                                                                        <sch:rule context="win-def:activedirectory_object/win-def:naming_context">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the naming_context entity of an activedirectory_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="relative_dn" type="oval-def:EntityObjectStringType" nillable="true">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The relative_dn field is used to uniquely identify an object inside the specified naming context. It contains all the parts of the object's distinguished name except those outlined by the naming context. If the nillable attribute is set to true, then the object being specified is the higher level naming context. In this case, the relative_dn element should not be collected or used in analysis. Setting nil equal to true is different than using a .* pattern match, which says to collect every relative dn under a given naming context. Note that when nil is used for the relative dn element, the attribute element should also be nilled.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="adobjrelative_dn">
                                                                        <sch:rule context="win-def:activedirectory_object/win-def:relative_dn">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the relative_dn entity of an activedirectory_object should be 'string'</sch:assert>
                                                                              <sch:assert test="not(@xsi:nil='true') or ../win-def:attribute/@xsi:nil='true'"><sch:value-of select="../@id"/> - attribute entity must be nil when relative_dn is nil</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="attribute" type="oval-def:EntityObjectStringType" nillable="true">
                                                      <xsd:annotation>
                                                            <xsd:documentation>Specifies a named value contained by the object. If the nillable attribute is set to true, then the object being specified is the higher level relative_dn. In this case, the attribute element should not be collected or used in analysis. Setting nil equal to true is different than using a .* pattern match, which says to collect every attribute under a given relative dn.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="adobjattribute">
                                                                        <sch:rule context="win-def:activedirectory_object/win-def:attribute">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the attribute entity of an activedirectory_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="activedirectory_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The activedirectory_state element defines the different information that can be used to evaluate the specified entries in active directory. An active directory test will reference a specific instance of this state that defines the exact settings that need to be evaluated. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="naming_context" type="win-def:EntityStateNamingContextType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Each object in active directory exists under a certain naming context (also known as a partition). A naming context is defined as a single object in the Directory Information Tree (DIT) along with every object in the tree subordinate to it. There are three default naming contexts in Active Directory: domain, configuration, and schema.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="adstenaming_context">
                                                            <sch:rule context="win-def:activedirectory_state/win-def:naming_context">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the naming_context entity of an activedirectory_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="relative_dn" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The relative_dn field is used to uniquely identify an object inside the specified naming context. It contains all the parts of the objects distinguished name except those outlined by the naming context.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="adsterelative_dn">
                                                            <sch:rule context="win-def:activedirectory_state/win-def:relative_dn">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the relative_dn entity of an activedirectory_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="attribute" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies a named value contained by the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="adsteattribute">
                                                            <sch:rule context="win-def:activedirectory_state/win-def:attribute">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the attribute entity of an activedirectory_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="object_class" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The name of the class of which the object is an instance.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="adsteobject_class">
                                                            <sch:rule context="win-def:activedirectory_state/win-def:object_class">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the object_class entity of an activedirectory_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="adstype" type="win-def:EntityStateAdstypeType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies the type of information that the specified attribute represents.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="adsteadstype">
                                                            <sch:rule context="win-def:activedirectory_state/win-def:adstype">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the adstype entity of an activedirectory_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="value" type="oval-def:EntityStateAnyType" minOccurs="0" maxOccurs="unbounded">
                                          <xsd:annotation>
                                                <xsd:documentation>The actual value of the specified active directory attribute.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="adstevalue">
                                                            <sch:rule context="win-def:activedirectory_state/win-def:value">
                                                                  <sch:assert test="(@datatype='int' and (floor(.) = number(.))) or not(@datatype='int') or not(node())"><sch:value-of select="../@id"/> - The datatype has been set to 'int' but the value is not an integer.</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ==========================  AUDIT EVENT POLICY TEST  ========================== -->
      <!-- =============================================================================== -->
      <xsd:element name="auditeventpolicy_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The audit event policy test is used to check different types of events the system should audit. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a auditeventpolicy_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="aeptst">
                              <sch:rule context="win-def:auditeventpolicy_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:auditeventpolicy_object/@id"><sch:value-of select="../@id"/> - the object child element of an auditeventpolicy_test must reference an auditeventpolicy_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:auditeventpolicy_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:auditeventpolicy_state/@id"><sch:value-of select="../@id"/> - the state child element of an auditeventpolicy_test must reference an auditeventpolicy_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="auditeventpolicy_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The auditeventpolicy_object element is used by an audit event policy test to define those objects to evaluate based on a specified state. There is actually only one object relating to audit event policy and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check audit event policy will reference the same auditeventpolicy_object which is basically an empty object element.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType"/>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="auditeventpolicy_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The auditeventpolicy_state element specifies the different system activities that can be audited. An audit event policy test will reference a specific instance of this state that defines the exact settings that need to be evaluated. The defined values are found in window's POLICY_AUDIT_EVENT_TYPE enumeration and accessed through the LsaQueryInformationPolicy when the InformationClass parameters are set to PolicyAuditEventsInformation. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="account_logon" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Audit attempts to log on to or log off of the system. Also, audit attempts to make a network connection.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsteaccount_logon">
                                                            <sch:rule context="win-def:auditeventpolicy_state/win-def:account_logon">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the account_logon entity of an auditeventpolicy_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="account_management" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Audit attempts to create, delete, or change user or group accounts. Also, audit password changes.</xsd:documentation>
                                                <xsd:appinfo>> <sch:pattern id="aepsteaccount_management">
                                                            <sch:rule context="win-def:auditeventpolicy_state/win-def:account_management">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the account_management entity of an auditeventpolicy_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="detailed_tracking" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Audit specific events, such as program activation, some forms of handle duplication, indirect access to an object, and process exit. </xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepstedetailed_tracking">
                                                            <sch:rule context="win-def:auditeventpolicy_state/win-def:detailed_tracking">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the detailed_tracking entity of an auditeventpolicy_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="directory_service_access" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Audit attempts to access the directory service.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepstedirectory_service_access">
                                                            <sch:rule context="win-def:auditeventpolicy_state/win-def:directory_service_access">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the directory_service_access entity of an auditeventpolicy_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="logon" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Audit attempts to log on to or log off of the system. Also, audit attempts to make a network connection.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepstelogon">
                                                            <sch:rule context="win-def:auditeventpolicy_state/win-def:logon">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the logon entity of an auditeventpolicy_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="object_access" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Audit attempts to access securable objects, such as files.</xsd:documentation>
                                                <xsd:appinfo>> <sch:pattern id="aepsteobject_access">
                                                            <sch:rule context="win-def:auditeventpolicy_state/win-def:object_access">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the object_access entity of an auditeventpolicy_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="policy_change" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Audit attempts to change Policy object rules. </xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepstepolicy_change">
                                                            <sch:rule context="win-def:auditeventpolicy_state/win-def:policy_change">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the policy_change entity of an auditeventpolicy_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="privilege_use" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Audit attempts to use privileges.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsteprivilege_use">
                                                            <sch:rule context="win-def:auditeventpolicy_state/win-def:privilege_use">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the privilege_use entity of an auditeventpolicy_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="system" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Audit attempts to shut down or restart the computer. Also, audit events that affect system security or the security log.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepstesystem">
                                                            <sch:rule context="win-def:auditeventpolicy_state/win-def:system">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the system entity of an auditeventpolicy_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ===================  AUDIT EVENT POLICY SUBCATEGORIES TEST  =================== -->
      <!-- =============================================================================== -->
      <xsd:element name="auditeventpolicysubcategories_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The audit event policy subcategories test is used to check different types of events the system should audit. These subcategories are new for Windows Vista. The test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a auditeventpolicy_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="aepstst">
                              <sch:rule context="win-def:auditeventpolicysubcategories_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:auditeventpolicysubcategories_object/@id"><sch:value-of select="../@id"/> - the object child element of an auditeventpolicysubcategories_test must reference an auditeventpolicysubcategories_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:auditeventpolicysubcategories_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:auditeventpolicysubcategories_state/@id"><sch:value-of select="../@id"/> - the state child element of an auditeventpolicysubcategories_test must reference an auditeventpolicysubcategories_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="auditeventpolicysubcategories_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The auditeventpolicysubcategories_object element is used by an audit event policy subcategories test to define those objects to evaluate based on a specified state. There is actually only one object relating to audit event policy subcategories and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check audit event policy subcategories will reference the same auditeventpolicysubcategories_object which is basically an empty object element.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType"/>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="auditeventpolicysubcategories_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The auditeventpolicysubcategories_state element specifies the different system activities that can be audited. An audit event policy subcategories test will reference a specific instance of this state that defines the exact subcategories that need to be evaluated. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <!-- Account Logon Audit Policy Subcategories -->
                                    <xsd:element name="credential_validation" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstecredentialvalidation">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:credential_validation">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the credential_validation entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="kerberos_ticket_events" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstekerberosticketevents">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:kerberos_ticket_events">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the kerberos_ticket_events entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="other_account_logon_events" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteotheraccountlogonevents">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:other_account_logon_events">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the other_account_logon_events entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <!-- Account Management Audit Policy Subcategories -->
                                    <xsd:element name="application_group_management" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteapplicationgroupmanagement">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:application_group_management">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the application_group_management entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="computer_account_management" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstecomputeraccountmanagement">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:computer_account_management">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the computer_account_management entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="distribution_group_management" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstedistributiongroupmanagement">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:distribution_group_management">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the distribution_group_management entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="other_account_management_events" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteotheraccountmanagementevents">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:other_account_management_events">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the other_account_management_events entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="security_group_management" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstesecuritygroupmanagement">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:security_group_management">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the security_group_management entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="user_account_management" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteuseraccountmanagement">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:user_account_management">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the user_account_management entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <!-- Detailed Tracking Audit Policy Subcategories -->
                                    <xsd:element name="dpapi_activity" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstedpapiactivity">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:dpapi_activity">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the dpapi_activity entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="process_creation" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteprocesscreation">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:process_creation">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the process_creation entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="process_termination" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteprocesstermination">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:process_termination">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the process_termination entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="rpc_events" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssterpcevents">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:rpc_events">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the rpc_events entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <!-- DS Access Audit Policy Subcategories -->
                                    <xsd:element name="directory_service_access" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstedirectoryserviceaccess">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:directory_service_access">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the directory_service_access entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="directory_service_changes" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstedirectoryservicechanges">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:directory_service_changes">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the directory_service_changes entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="directory_service_replication" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstedirectoryservicereplication">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:directory_service_replication">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the directory_service_replication entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="detailed_directory_service_replication" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstedetaileddirectoryservicereplication">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:detailed_directory_service_replication">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the detailed_directory_service_replication entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <!-- Logon/Logoff Audit Policy Subcategories -->
                                    <xsd:element name="account_lockout" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteaccountlockout">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:account_lockout">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the account_lockout entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="ipsec_extended_mode" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteipsecextendedmode">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:ipsec_extended_mode">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the ipsec_extended_mode entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="ipsec_main_mode" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteipsecmainmode">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:ipsec_main_mode">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the ipsec_main_mode entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="ipsec_quick_mode" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteipsec_quick_mode">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:ipsec_quick_mode">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the ipsec_quick_mode entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="logoff" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstelogoff">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:logoff">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the logoff entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="logon" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstelogon">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:logon">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the logon entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="other_logon_logoff_events" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteotherlogonlogoffevents">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:other_logon_logoff_events">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the other_logon_logoff_events entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="special_logon" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstespeciallogon">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:special_logon">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the special_logon entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <!-- Object Access Audit Policy Subcategories -->
                                    <xsd:element name="application_generated" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteapplicationgenerated">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:application_generated">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the application_generated entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="certification_services" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstecertificationservices">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:certification_services">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the certification_services entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_share" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstefileshare">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:file_share">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_share entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_system" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstefilesystem">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:file_system">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_system entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filtering_platform_connection" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstefilteringplatformconnection">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:filtering_platform_connection">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filtering_platform_connection entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filtering_platform_packet_drop" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstefilteringplatformpacketdrop">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:filtering_platform_packet_drop">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filtering_platform_packet_drop entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="handle_manipulation" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstehandlemanipulation">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:handle_manipulation">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the handle_manipulation entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="kernel_object" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstekernelobject">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:kernel_object">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the kernel_object entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="other_object_access_events" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteotherobjectaccessevents">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:other_object_access_events">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the other_object_access_events entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="registry" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteregistry">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:registry">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the registry entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sam" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstesam">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:sam">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the sam entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <!-- Policy Change Audit Policy Subcategories -->
                                    <xsd:element name="audit_policy_change" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteauditpolicychange">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:audit_policy_change">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the audit_policy_change entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="authentication_policy_change" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteauthenticationpolicychange">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:authentication_policy_change">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the authentication_policy_change entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="authorization_policy_change" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteauthorizationpolicychange">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:authorization_policy_change">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the authorization_policy_change entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filtering_platform_policy_change" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstefilteringplatformpolicychange">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:filtering_platform_policy_change">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filtering_platform_policy_change entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="mpssvc_rule_level_policy_change" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstempssvcrulelevelpolicychange">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:mpssvc_rule_level_policy_change">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the mpssvc_rule_level_policy_change entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="other_policy_change_events" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteotherpolicychangeevents">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:other_policy_change_events">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the other_policy_change_events entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <!-- Privilege Use Audit Policy Subcategories -->
                                    <xsd:element name="non_sensitive_privilege_use" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstenonsensitiveprivilegeuse">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:non_sensitive_privilege_use">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the non_sensitive_privilege_use entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="other_privilege_use_events" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteotherprivilegeuseevents">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:other_privilege_use_events">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the other_privilege_use_events entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="sensitive_privilege_use" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstesensitive_privilege_use">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:sensitive_privilege_use">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the sensitive_privilege_use entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <!-- System Audit Policy Subcategories -->
                                    <xsd:element name="ipsec_driver" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteipsecdriver">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:ipsec_driver">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the ipsec_driver entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="other_system_events" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepssteothersystemevents">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:other_system_events">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the other_system_events entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="security_state_change" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstesecuritystatechange">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:security_state_change">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the security_state_change entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="security_system_extension" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstesecuritysystemextension">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:security_system_extension">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the security_system_extension entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="system_integrity" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="aepsstesystemintegrity">
                                                            <sch:rule context="win-def:auditeventpolicysubcategories_state/win-def:system_integrity">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the system_integrity entity of an auditeventpolicysubcategories_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- =================================  FILE TEST  ================================= -->
      <!-- =============================================================================== -->
      <xsd:element name="file_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The file test is used to check metadata associated with Windows files. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a file_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="filetst">
                              <sch:rule context="win-def:file_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:file_object/@id"><sch:value-of select="../@id"/> - the object child element of a file_test must reference a file_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:file_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:file_state/@id"><sch:value-of select="../@id"/> - the state child element of a file_test must reference a file_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="file_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The file_object element is used by a file test to define the specific file(s) to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
                  <xsd:documentation>A file object defines the path and filename of the file(s). In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the FileBehaviors complex type for more information about specific behaviors.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set"/>
                                          <xsd:sequence>
                                                <xsd:element name="behaviors" type="win-def:FileBehaviors" minOccurs="0"/>
                                                <xsd:element name="path" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The path element specifies the absolute path to a file on the machine.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fileobjpath">
                                                                        <sch:rule context="win-def:file_object/win-def:path">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the path entity of a file_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="filename" type="oval-def:EntityObjectStringType" nillable="true">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The filename element specifies the name of a file to evaluate. If the nillable attribute is set to true, then the object being specified is the higher level directory object. (not all the files in the directory) In this case, the filename element should not be used during collection and would result in the set of collected objects being the directories themselves. For example, one would set nillable to true if the desire was to as test the attributes or permissions associated with a directory. Setting nil equal to true is different than using a .* pattern match, which says to collect every file under a given path.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fileobjfilename">
                                                                        <sch:rule context="win-def:file_object/win-def:filename">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filename entity of a file_object should be 'string'</sch:assert>
                                                                            <sch:assert test="(not(contains(.,'\') or contains(.,'/') or contains(.,':') or contains(.,'*') or contains(.,'?') or contains(.,'>') or contains(.,'|'))) or (@operation='pattern match')"><sch:value-of select="../@id"/> - filename entity can not contain the characters / \ : * ? > | </sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="file_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The file_state element defines the different metadata associate with a Windows file. This includes the path, filename, owner, size, last modified time, version, etc. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The path element specifies the absolute path to a file on the machine.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filestepath">
                                                            <sch:rule context="win-def:file_state/win-def:path">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the path entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The filename element specifies the name of the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filestefilename">
                                                            <sch:rule context="win-def:file_state/win-def:filename">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filename entity of a file_state should be 'string'</sch:assert>
                                                                <sch:assert test="(not(contains(.,'\') or contains(.,'/') or contains(.,':') or contains(.,'*') or contains(.,'?') or contains(.,'>') or contains(.,'|'))) or (@operation='pattern match')"><sch:value-of select="../@id"/> - filename entity can not contain the characters / \ : * ? > | </sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="owner" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The owner element is a string that contains the name of the owner.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filesteowner">
                                                            <sch:rule context="win-def:file_state/win-def:owner">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the owner entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="size" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The size element is the size of the file in bytes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <valid_datatypes>integer</valid_datatypes>
                                                      <valid_operators>equals, not equal, greater than, less than, greater than or equal, less than or equal</valid_operators>
                                                      <sch:pattern id="filestesize">
                                                            <sch:rule context="win-def:file_state/win-def:size">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the size entity of a file_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="a_time" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Time of last access of file. Valid on NTFS but not on FAT formatted disk drives. The string should represent the FILETIME structure which is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filestea_time">
                                                            <sch:rule context="win-def:file_state/win-def:a_time">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the a_time entity of a file_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="c_time" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Time of creation of file. Valid on NTFS but not on FAT formatted disk drives. The string should represent the FILETIME structure which is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filestec_time">
                                                            <sch:rule context="win-def:file_state/win-def:c_time">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the c_time entity of a file_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="m_time" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Time of last modification of file. The string should represent the FILETIME structure which is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filestem_time">
                                                            <sch:rule context="win-def:file_state/win-def:m_time">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the m_time entity of a file_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="ms_checksum" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The ms_checksum element is the md5 checksum of the file as supplied by Microsoft.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filestems_checksum">
                                                            <sch:rule context="win-def:file_state/win-def:ms_checksum">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the ms_checksum entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="version" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The version element is the delimited version string of the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filesteversion">
                                                            <sch:rule context="win-def:file_state/win-def:version">
                                                                  <sch:assert test="@datatype='version'"><sch:value-of select="../@id"/> - datatype attribute for the version entity of a file_state should be 'version'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="type" type="win-def:EntityStateFileTypeType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The type element marks whether the file is a directory, named pipe, standard file, etc. These types are the return values for GetFileType, with the exception of FILE_ATTRIBUTE_DIRECTORY which is obtained by looking at GetFileAttributesEx. NOTE: Should this entity be split into two in future versions of the language as there are other values associated with GetFileAttributesEx that are not represented here?</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filestetype">
                                                            <sch:rule context="win-def:file_state/win-def:type">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the type entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="development_class" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The development_class element allows the distinction to be made between the GDR development environment and the QFE development environment. This field holds the text found in front of the mmmmmm-nnnn version, for example srv03_gdr.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filestedevelopment_class">
                                                            <sch:rule context="win-def:file_state/win-def:development_class">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the development_class entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="company" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This entity defines a company name to be found within the version-information structure.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filestecompany">
                                                            <sch:rule context="win-def:file_state/win-def:company">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the company entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="internal_name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This entity defines an internal name to be found within the version-information structure.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filesteinternalname">
                                                            <sch:rule context="win-def:file_state/win-def:internal_name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the internal_name entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="language" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This entity defines a language to be found within the version-information structure.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filestelanguage">
                                                            <sch:rule context="win-def:file_state/win-def:language">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the language entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="original_filename" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This entity defines an original filename to be found within the version-information structure.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filesteoriginalfilename">
                                                            <sch:rule context="win-def:file_state/win-def:original_filename">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the original_filename entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="product_name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This entity defines a product name to be found within the version-information structure.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filesteproductname">
                                                            <sch:rule context="win-def:file_state/win-def:product_name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the product_name entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="product_version" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This entity defines a product version to be found within the version-information structure.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="filesteproductversion">
                                                            <sch:rule context="win-def:file_state/win-def:product_version">
                                                                  <sch:assert test="@datatype='version'"><sch:value-of select="../@id"/> - datatype attribute for the product_version entity of a file_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="FileBehaviors">
            <xsd:annotation>
                  <xsd:documentation>The FileBehaviors complex type defines a number of behaviors that allow a more detailed definition of the file objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="max_depth" use="optional" default="-1">
                  <xsd:annotation>
                        <xsd:documentation>'max_depth' defines the maximum depth of recursion to perform when a recurse_direction is specified. A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on. The default value is '-1' meaning no limitation. Note that the default recurse_direction behavior is 'none' so even though max_depth specifies no limitation by default, the recurse_direction behavior turns recusion off.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:integer">
                              <xsd:fractionDigits value="0"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="recurse_direction" use="optional" default="none">
                  <xsd:annotation>
                        <xsd:documentation>'recurse_direction' defines the direction, either 'up' to parent directories, or 'down' into child directories to recursively search for files. When recursing up or down, one is limited by the max_depth behavior. Note that it is not an error if max_depth specifies a certain level of recursion and that level does not exist. Recursing should only go as deep as available. The default value is 'none' for no recursion.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="none"/>
                              <xsd:enumeration value="up"/>
                              <xsd:enumeration value="down"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ====================  FILE AUDITED PERMISSIONS TEST (53)  ===================== -->
      <!-- =============================================================================== -->
      <xsd:element name="fileauditedpermissions53_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The file audit permissions test is used to check the audit permissions associated with Windows files. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a fileauditedpermissions_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="fap53tst">
                              <sch:rule context="win-def:fileauditedpermissions53_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:fileauditedpermissions53_object/@id"><sch:value-of select="../@id"/> - the object child element of a fileauditedpermissions53_test must reference a fileauditedpermissions53_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:fileauditedpermissions53_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:fileauditedpermissions53_state/@id"><sch:value-of select="../@id"/> - the state child element of a fileauditedpermissions53_test must reference a fileauditedpermissions53_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="fileauditedpermissions53_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The fileauditedpermissions53_object element is used by a file audited permissions test to define the objects used to evalutate against the specified state. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic.</xsd:documentation>
                  <xsd:documentation>A fileauditedpermissions53_object is defined as a combination of a Windows file and trustee sid. The file represents the file to be evaluated while the trustee sid represents the account (sid) to check audited permissions of. If multiple files or sids are matched by either reference, then each possible combination of file and sid is a matching file audited permissions object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the FileAuditPermissions53Behaviors complex type for more information about specific behaviors.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="behaviors" type="win-def:FileAuditPermissions53Behaviors" minOccurs="0"/>
                                                <xsd:element name="path" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The path element specifies the absolute path to a file on the machine.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fap53objpath">
                                                                        <sch:rule context="win-def:fileauditedpermissions53_object/win-def:path">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the path entity of a fileauditedpermissions53_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="filename" type="oval-def:EntityObjectStringType" nillable="true">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The filename element specifies the name of a file to evaluate. If the nillable attribute is set to true, then the object being specified is the higher level directory object. (not all the files in the directory) In this case, the filename element should not be used during collection and would result in the set of collected objects being the directories themselves. For example, one would set nillable to true if the desire was to as test the attributes or permissions associated with a directory. Setting nil equal to true is different than using a .* pattern match, which says to collect every file under a given path.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fap53objfilename">
                                                                        <sch:rule context="win-def:fileauditedpermissions53_object/win-def:filename">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filename entity of a fileauditedpermissions53_object should be 'string'</sch:assert>
                                                                            <sch:assert test="(not(contains(.,'\') or contains(.,'/') or contains(.,':') or contains(.,'*') or contains(.,'?') or contains(.,'>') or contains(.,'|'))) or (@operation='pattern match')"><sch:value-of select="../@id"/> - filename entity can not contain the characters / \ : * ? > | </sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="trustee_sid" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                          <xsd:documentation>The trustee_sid element is the unique sid that associated a user, group, system, or program (such as a Windows service).  If a pattern match operation is used attempts to identify all the trustees (for exampl a .* pattern) then the search should be limited to just the trustees on the DACL/SACL of the object in question.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fap53objtrustee_sid">
                                                                        <sch:rule context="win-def:fileauditedpermissions53_object/win-def:trustee_sid">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a fileauditedpermissions53_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="fileauditedpermissions53_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The fileauditedpermissions53_state element defines the different audit permissions that can be associated with a given fileauditedpermissions53_object. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The path element specifies the absolute path (for a file on the machine) to test for.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stepath">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:path">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the path entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The filename element specifies the name of a file to test for.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stefilename">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:filename">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filename entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                                <sch:assert test="(not(contains(.,'\') or contains(.,'/') or contains(.,':') or contains(.,'*') or contains(.,'?') or contains(.,'>') or contains(.,'|'))) or (@operation='pattern match')"><sch:value-of select="../@id"/> - filename entity can not contain the characters / \ : * ? > | </sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The trustee_sid element is the unique sid that associated a user, group, system, or program (such as a Windows service).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stetrustee_sid">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:trustee_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_delete" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to delete the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stestandard_delete">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:standard_delete">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_delete entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_read_control" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to read the information in the object's security descriptor, not including the information in the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stestandard_read_control">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:standard_read_control">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_read_control entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_dac" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to modify the DACL in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stestandard_write_dac">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:standard_write_dac">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_dac entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_owner" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to change the owner in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stestandard_write_owner">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:standard_write_owner">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_owner entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_synchronize" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Windows NT/2000: The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stestandard_synchronize">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:standard_synchronize">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_synchronize entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_system_security" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Indicates access to a system access control list (SACL).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53steaccess_system_security">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:access_system_security">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the access_system_security entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_read" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stegeneric_read">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:generic_read">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_read entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_write" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Write access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stegeneric_write">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:generic_write">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_write entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_execute" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stegeneric_execute">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:generic_execute">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_execute entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_all" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read, write, and execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stegeneric_all">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:generic_all">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_all entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_data" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read data from the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stefile_read_data">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:file_read_data">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_data entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_data" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to write data to the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stefile_write_data">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:file_write_data">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_data entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_append_data" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to append data to the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stefile_append_data">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:file_append_data">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_append_data entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_ea" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read extended attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stefile_read_ea">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:file_read_ea">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_ea entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_ea" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to write extended attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stefile_write_ea">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:file_write_ea">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_ea entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_execute" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to execute a file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stefile_execute">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:file_execute">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_execute entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_delete_child" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Right to delete a directory and all the files it contains (its children), even if the files are read-only.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stefile_delete_child">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:file_delete_child">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_delete_child entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_attributes" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read file attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stefile_read_attributes">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:file_read_attributes">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_attributes entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_attributes" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to change file attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fap53stefile_write_attributes">
                                                            <sch:rule context="win-def:fileauditedpermissions53_state/win-def:file_write_attributes">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_attributes entity of a fileauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="FileAuditPermissions53Behaviors">
            <xsd:annotation>
                  <xsd:documentation>These behaviors allow a more detailed definition of the fileauditpermissions53_objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="max_depth" use="optional" default="-1">
                  <xsd:annotation>
                        <xsd:documentation>'max_depth' defines the maximum depth of recursion to perform when a recurse_direction is specified. A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on. The default value is '-1' meaning no limitation. Note that the default recurse_direction behavior is 'none' so even though max_depth specifies no limitation by default, the recurse_direction behavior turns recusion off.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:integer">
                              <xsd:fractionDigits value="0"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="recurse_direction" use="optional" default="none">
                  <xsd:annotation>
                        <xsd:documentation>'recurse_direction' defines the direction, either 'up' to parent directories, or 'down' into child directories to recursively search for files. When recursing up or down, one is limited by the max_depth behavior. Note that it is not an error if max_depth specifies a certain level of recursion and that level does not exist. Recursing should only go as deep as available. The default value is 'none' for no recursion.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="none"/>
                              <xsd:enumeration value="up"/>
                              <xsd:enumeration value="down"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true"/>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false"/>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ================  FILE AUDITED PERMISSIONS (deprecated) TEST  ================= -->
      <!-- =============================================================================== -->
      <xsd:element name="fileauditedpermissions_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>This test has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer fileauditedpermissions53_test.</xsd:documentation>
                  <xsd:documentation>The file audit permissions test is used to check the audit permissions associated with Windows files. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a fileauditedpermissions_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="faptst">
                              <sch:rule context="win-def:fileauditedpermissions_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:fileauditedpermissions_object/@id"><sch:value-of select="../@id"/> - the object child element of a fileauditedpermissions_test must reference a fileauditedpermissions_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:fileauditedpermissions_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:fileauditedpermissions_state/@id"><sch:value-of select="../@id"/> - the state child element of a fileauditedpermissions_test must reference a fileauditedpermissions_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="fileauditedpermissions_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>This object has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer fileauditedpermissions53_object.</xsd:documentation>
                  <xsd:documentation>The fileauditedpermissions_object element is used by a file audited permissions test to define the objects used to evalutate against the specified state. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic.</xsd:documentation>
                  <xsd:documentation>A fileauditedpermissions_object is defined as a combination of a Windows file and trustee name. The file represents the file to be evaluated while the trustee name represents the account (sid) to check audited permissions of. If multiple files or sids are matched by either reference, then each possible combination of file and sid is a matching file audited permissions object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the FileAuditPermissionsBehaviors complex type for more information about specific behaviors.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="behaviors" type="win-def:FileAuditPermissionsBehaviors" minOccurs="0"/>
                                                <xsd:element name="path" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The path element specifies the absolute path to a file on the machine.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fapobjpath">
                                                                        <sch:rule context="win-def:fileauditedpermissions_object/win-def:path">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the path entity of a fileauditedpermissions_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="filename" type="oval-def:EntityObjectStringType" nillable="true">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The filename element specifies the name of a file to evaluate. If the nillable attribute is set to true, then the object being specified is the higher level directory object. (not all the files in the directory) In this case, the filename element should not be used during collection and would result in the set of collected objects being the directories themselves. For example, one would set nillable to true if the desire was to as test the attributes or permissions associated with a directory. Setting nil equal to true is different than using a .* pattern match, which says to collect every file under a given path.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fapobjfilename">
                                                                        <sch:rule context="win-def:fileauditedpermissions_object/win-def:filename">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filename entity of a fileauditedpermissions_object should be 'string'</sch:assert>
                                                                            <sch:assert test="(not(contains(.,'\') or contains(.,'/') or contains(.,':') or contains(.,'*') or contains(.,'?') or contains(.,'>') or contains(.,'|'))) or (@operation='pattern match')"><sch:value-of select="../@id"/> - filename entity can not contain the characters / \ : * ? > | </sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="trustee_name" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The trustee_name element is the unique name that associated a particular SID. A SID can be associated with a user, group, or program (such as a Windows service). In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fapobjtrustee_name">
                                                                        <sch:rule context="win-def:fileauditedpermissions_object/win-def:trustee_name">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a fileauditedpermissions_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="fileauditedpermissions_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>This state has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer fileauditedpermissions53_state.</xsd:documentation>
                  <xsd:documentation>The fileauditedpermissions_state element defines the different audit permissions that can be associated with a given fileauditedpermissions_object. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The path element specifies the absolute path (for a file on the machine) to test for.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstepath">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:path">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the path entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The filename element specifies the name of a file to test for.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstefilename">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:filename">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filename entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                                <sch:assert test="(not(contains(.,'\') or contains(.,'/') or contains(.,':') or contains(.,'*') or contains(.,'?') or contains(.,'>') or contains(.,'|'))) or (@operation='pattern match')"><sch:value-of select="../@id"/> - filename entity can not contain the characters / \ : * ? > | </sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The trustee_name is the unique name associated with a particular security identifier (SID). In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstetrustee_name">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:trustee_name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_delete" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to delete the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstestandard_delete">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:standard_delete">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_delete entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_read_control" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to read the information in the object's security descriptor, not including the information in the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstestandard_read_control">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:standard_read_control">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_read_control entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_dac" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to modify the DACL in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstestandard_write_dac">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:standard_write_dac">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_dac entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_owner" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to change the owner in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstestandard_write_owner">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:standard_write_owner">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_owner entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_synchronize" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Windows NT/2000: The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstestandard_synchronize">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:standard_synchronize">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_synchronize entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_system_security" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Indicates access to a system access control list (SACL).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapsteaccess_system_security">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:access_system_security">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the access_system_security entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_read" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstegeneric_read">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:generic_read">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_read entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_write" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Write access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstegeneric_write">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:generic_write">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_write entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_execute" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstegeneric_execute">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:generic_execute">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_execute entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_all" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read, write, and execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstegeneric_all">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:generic_all">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_all entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_data" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read data from the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstefile_read_data">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:file_read_data">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_data entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_data" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to write data to the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstefile_write_data">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:file_write_data">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_data entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_append_data" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to append data to the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstefile_append_data">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:file_append_data">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_append_data entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_ea" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read extended attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstefile_read_ea">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:file_read_ea">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_ea entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_ea" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to write extended attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstefile_write_ea">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:file_write_ea">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_ea entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_execute" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to execute a file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstefile_execute">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:file_execute">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_execute entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_delete_child" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Right to delete a directory and all the files it contains (its children), even if the files are read-only.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstefile_delete_child">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:file_delete_child">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_delete_child entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_attributes" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read file attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstefile_read_attributes">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:file_read_attributes">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_attributes entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_attributes" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to change file attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fapstefile_write_attributes">
                                                            <sch:rule context="win-def:fileauditedpermissions_state/win-def:file_write_attributes">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_attributes entity of a fileauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="FileAuditPermissionsBehaviors">
            <xsd:annotation>
                  <xsd:documentation>These behaviors allow a more detailed definition of the fileauditpermissions_objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="max_depth" use="optional" default="-1">
                  <xsd:annotation>
                        <xsd:documentation>'max_depth' defines the maximum depth of recursion to perform when a recurse_direction is specified. A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on. The default value is '-1' meaning no limitation. Note that the default recurse_direction behavior is 'none' so even though max_depth specifies no limitation by default, the recurse_direction behavior turns recusion off.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:integer">
                              <xsd:fractionDigits value="0"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="recurse_direction" use="optional" default="none">
                  <xsd:annotation>
                        <xsd:documentation>'recurse_direction' defines the direction, either 'up' to parent directories, or 'down' into child directories to recursively search for files. When recursing up or down, one is limited by the max_depth behavior. Note that it is not an error if max_depth specifies a certain level of recursion and that level does not exist. Recursing should only go as deep as available. The default value is 'none' for no recursion.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="none"/>
                              <xsd:enumeration value="up"/>
                              <xsd:enumeration value="down"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true"/>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false"/>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ========================  FILE EFFECTIVE RIGHTS TEST (53)  ========================= -->
      <!-- =============================================================================== -->
      <xsd:element name="fileeffectiverights53_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The file effective rights test is used to check the effective rights associated with Windows files. Note that the trustee's effective access rights are the access rights that the ACL grants to the trustee or to any groups of which the trustee is a member. The fileeffectiverights53_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a fileeffectiverights53_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="fer53tst">
                              <sch:rule context="win-def:fileeffectiverights53_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:fileeffectiverights53_object/@id"><sch:value-of select="../@id"/> - the object child element of a fileeffectiverights53_test must reference a fileeffectiverights53_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:fileeffectiverights53_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:fileeffectiverights53_state/@id"><sch:value-of select="../@id"/> - the state child element of a fileeffectiverights53_test must reference a fileeffectiverights53_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="fileeffectiverights53_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The fileeffectiverights53_object element is used by a file effective rights test to define the objects used to evalutate against the specified state. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic.</xsd:documentation>
                  <xsd:documentation>A fileeffectiverights53_object is defined as a combination of a Windows file and trustee sid. The file represents the file to be evaluated while the trustee sid represents the account (sid) to check effective rights of. If multiple files or sids are matched by either reference, then each possible combination of file and sid is a matching file effective rights object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the FileEffectiveRights53Behaviors complex type for more information about specific behaviors.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="behaviors" type="win-def:FileEffectiveRights53Behaviors" minOccurs="0"/>
                                                <xsd:element name="path" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>Specifies the absolute path to a file on the machine.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fer53objpath">
                                                                        <sch:rule context="win-def:fileeffectiverights53_object/win-def:path">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the path entity of a fileeffectiverights53_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="filename" type="oval-def:EntityObjectStringType" nillable="true">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The filename element specifies the name of a file to evaluate. If the nillable attribute is set to true, then the object being specified is the higher level directory object. (not all the files in the directory) In this case, the filename element should not be used during collection and would result in the set of collected objects being the directories themselves. For example, one would set nillable to true if the desire was to as test the attributes or permissions associated with a directory. Setting nil equal to true is different than using a .* pattern match, which says to collect every file under a given path..</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fer53objfilename">
                                                                        <sch:rule context="win-def:fileeffectiverights53_object/win-def:filename">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filename entity of a fileeffectiverights53_object should be 'string'</sch:assert>
                                                                            <sch:assert test="(not(contains(.,'\') or contains(.,'/') or contains(.,':') or contains(.,'*') or contains(.,'?') or contains(.,'>') or contains(.,'|'))) or (@operation='pattern match')"><sch:value-of select="../@id"/> - filename entity can not contain the characters / \ : * ? > | </sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="trustee_sid" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                          <xsd:documentation>The trustee_sid element is the unique sid that associated a user, group, system, or program (such as a Windows service).  If a pattern match operation is used attempts to identify all the trustees (for exampl a .* pattern) then the search should be limited to just the trustees on the DACL/SACL of the object in question.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fer53objtrustee_sid">
                                                                        <sch:rule context="win-def:fileeffectiverights53_object/win-def:trustee_sid">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a fileeffectiverights53_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="fileeffectiverights53_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The fileeffectiverights53_state element defines the different rights that can be associated with a given fileeffectiverights53_object. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The path element specifies the absolute path to a file on the machine.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stepath">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:path">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the path entity of a fileeffectiverights53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The filename element specifies the name of the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stefilename">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:filename">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filename entity of a fileeffectiverights53_state should be 'string'</sch:assert>
                                                                <sch:assert test="(not(contains(.,'\') or contains(.,'/') or contains(.,':') or contains(.,'*') or contains(.,'?') or contains(.,'>') or contains(.,'|'))) or (@operation='pattern match')"><sch:value-of select="../@id"/> - filename entity can not contain the characters / \ : * ? > | </sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The trustee_sid element is the unique sid that associated a user, group, system, or program (such as a Windows service).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stetrustee_sid">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:trustee_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a fileeffectiverights53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_delete" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to delete the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stestandard_delete">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:standard_delete">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_delete entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_read_control" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to read the information in the object's security descriptor, not including the information in the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stestandard_read_control">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:standard_read_control">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_read_control entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_dac" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to modify the DACL in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stestandard_write_dac">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:standard_write_dac">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_dac entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_owner" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to change the owner in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stestandard_write_owner">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:standard_write_owner">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_owner entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_synchronize" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Windows NT/2000: The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stestandard_synchronize">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:standard_synchronize">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_synchronize entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_system_security" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Indicates access to a system access control list (SACL).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53steaccess_system_security">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:access_system_security">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the access_system_security entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_read" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stegeneric_read">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:generic_read">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_read entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_write" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Write access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stegeneric_write">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:generic_write">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_write entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_execute" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stegeneric_execute">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:generic_execute">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_execute entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_all" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read, write, and execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stegeneric_all">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:generic_all">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_all entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_data" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read data from the file</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stefile_read_data">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:file_read_data">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_data entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_data" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to write data to the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stefile_write_data">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:file_write_data">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_data entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_append_data" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to append data to the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stefile_append_data">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:file_append_data">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_append_data entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_ea" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read extended attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stefile_read_ea">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:file_read_ea">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_ea entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_ea" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to write extended attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stefile_write_ea">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:file_write_ea">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_ea entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_execute" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to execute a file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stefile_execute">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:file_execute">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_execute entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_delete_child" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Right to delete a directory and all the files it contains (its children), even if the files are read-only.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stefile_delete_child">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:file_delete_child">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_delete_child entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_attributes" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read file attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stefile_read_attributes">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:file_read_attributes">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_attributes entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_attributes" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to change file attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fer53stefile_write_attributes">
                                                            <sch:rule context="win-def:fileeffectiverights53_state/win-def:file_write_attributes">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_attributes entity of a fileeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="FileEffectiveRights53Behaviors">
            <xsd:annotation>
                  <xsd:documentation>These behaviors allow a more detailed definition of the fileeffectiverights53_objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="max_depth" use="optional" default="-1">
                  <xsd:annotation>
                        <xsd:documentation>'max_depth' defines the maximum depth of recursion to perform when a recurse_direction is specified. A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on. The default value is '-1' meaning no limitation. Note that the default recurse_direction behavior is 'none' so even though max_depth specifies no limitation by default, the recurse_direction behavior turns recusion off.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:integer">
                              <xsd:fractionDigits value="0"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="recurse_direction" use="optional" default="none">
                  <xsd:annotation>
                        <xsd:documentation>'recurse_direction' defines the direction, either 'up' to parent directories, or 'down' into child directories to recursively search for files. When recursing up or down, one is limited by the max_depth behavior. Note that it is not an error if max_depth specifies a certain level of recursion and that level does not exist. Recursing should only go as deep as available. The default value is 'none' for no recursion.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="none"/>
                              <xsd:enumeration value="up"/>
                              <xsd:enumeration value="down"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true"/>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false"/>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ==================  FILE EFFECTIVE RIGHTS TEST (deprecated)  ================== -->
      <!-- =============================================================================== -->
      <xsd:element name="fileeffectiverights_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>This test has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer fileeffectiverights53_test.</xsd:documentation>
                  <xsd:documentation>The file effective rights test is used to check the effective rights associated with Windows files. Note that the trustee's effective access rights are the access rights that the ACL grants to the trustee or to any groups of which the trustee is a member. The fileeffectiverights_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a fileeffectiverights_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="fertst">
                              <sch:rule context="win-def:fileeffectiverights_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:fileeffectiverights_object/@id"><sch:value-of select="../@id"/> - the object child element of a fileeffectiverights_test must reference a fileeffectiverights_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:fileeffectiverights_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:fileeffectiverights_state/@id"><sch:value-of select="../@id"/> - the state child element of a fileeffectiverights_test must reference a fileeffectiverights_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="fileeffectiverights_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>This object has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer fileeffectiverights53_object.</xsd:documentation>
                  <xsd:documentation>The fileeffectiverights_object element is used by a file effective rights test to define the objects used to evalutate against the specified state. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic.</xsd:documentation>
                  <xsd:documentation>A fileeffectiverights_object is defined as a combination of a Windows file and trustee name. The file represents the file to be evaluated while the trustee name represents the account (sid) to check effective rights of. If multiple files or sids are matched by either reference, then each possible combination of file and sid is a matching file effective rights object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the FileEffectiveRightsBehaviors complex type for more information about specific behaviors.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="behaviors" type="win-def:FileEffectiveRightsBehaviors" minOccurs="0"/>
                                                <xsd:element name="path" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>Specifies the absolute path to a file on the machine.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fefobjpath">
                                                                        <sch:rule context="win-def:fileeffectiverights_object/win-def:path">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the path entity of a fileeffectiverights_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="filename" type="oval-def:EntityObjectStringType" nillable="true">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The filename element specifies the name of a file to evaluate. If the nillable attribute is set to true, then the object being specified is the higher level directory object. (not all the files in the directory) In this case, the filename element should not be used during collection and would result in the set of collected objects being the directories themselves. For example, one would set nillable to true if the desire was to as test the attributes or permissions associated with a directory. Setting nil equal to true is different than using a .* pattern match, which says to collect every file under a given path.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fefobjfilename">
                                                                        <sch:rule context="win-def:fileeffectiverights_object/win-def:filename">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filename entity of a fileeffectiverights_object should be 'string'</sch:assert>
                                                                            <sch:assert test="(not(contains(.,'\') or contains(.,'/') or contains(.,':') or contains(.,'*') or contains(.,'?') or contains(.,'>') or contains(.,'|'))) or (@operation='pattern match')"><sch:value-of select="../@id"/> - filename entity can not contain the characters / \ : * ? > | </sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="trustee_name" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The trustee_name element is the unique name that associated a particular SID. A SID can be associated with a user, group, or program (such as a Windows service). In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="fefobjtrustee_name">
                                                                        <sch:rule context="win-def:fileeffectiverights_object/win-def:trustee_name">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a fileeffectiverights_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="fileeffectiverights_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>This state has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer fileeffectiverights53_state.</xsd:documentation>
                  <xsd:documentation>The fileeffectiverights_state element defines the different rights that can be associated with a given fileeffectiverights_object. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The path element specifies the absolute path to a file on the machine.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstepath">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:path">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the path entity of a fileeffectiverights_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The filename element specifies the name of the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstefilename">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:filename">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the filename entity of a fileeffectiverights_state should be 'string'</sch:assert>
                                                                <sch:assert test="(not(contains(.,'\') or contains(.,'/') or contains(.,':') or contains(.,'*') or contains(.,'?') or contains(.,'>') or contains(.,'|'))) or (@operation='pattern match')"><sch:value-of select="../@id"/> - filename entity can not contain the characters / \ : * ? > | </sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The unique name associated with a particular security identifier (SID). In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstetrustee_name">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:trustee_name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a fileeffectiverights_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_delete" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to delete the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstestandard_delete">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:standard_delete">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_delete entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_read_control" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to read the information in the object's security descriptor, not including the information in the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstestandard_read_control">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:standard_read_control">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_read_control entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_dac" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to modify the DACL in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstestandard_write_dac">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:standard_write_dac">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_dac entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_owner" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to change the owner in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstestandard_write_owner">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:standard_write_owner">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_owner entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_synchronize" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Windows NT/2000: The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstestandard_synchronize">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:standard_synchronize">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_synchronize entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_system_security" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Indicates access to a system access control list (SACL).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="fersteaccess_system_security">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:access_system_security">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the access_system_security entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_read" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstegeneric_read">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:generic_read">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_read entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_write" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Write access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstegeneric_write">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:generic_write">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_write entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_execute" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstegeneric_execute">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:generic_execute">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_execute entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_all" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read, write, and execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstegeneric_all">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:generic_all">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_all entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_data" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read data from the file</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstefile_read_data">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:file_read_data">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_data entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_data" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to write data to the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstefile_write_data">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:file_write_data">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_data entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_append_data" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to append data to the file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstefile_append_data">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:file_append_data">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_append_data entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_ea" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read extended attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstefile_read_ea">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:file_read_ea">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_ea entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_ea" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to write extended attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstefile_write_ea">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:file_write_ea">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_ea entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_execute" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to execute a file.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstefile_execute">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:file_execute">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_execute entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_delete_child" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Right to delete a directory and all the files it contains (its children), even if the files are read-only.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstefile_delete_child">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:file_delete_child">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_delete_child entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_attributes" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to read file attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstefile_read_attributes">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:file_read_attributes">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_attributes entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_write_attributes" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Grants the right to change file attributes.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ferstefile_write_attributes">
                                                            <sch:rule context="win-def:fileeffectiverights_state/win-def:file_write_attributes">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_write_attributes entity of a fileeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="FileEffectiveRightsBehaviors">
            <xsd:annotation>
                  <xsd:documentation>These behaviors allow a more detailed definition of the fileeffectiverights_objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="max_depth" use="optional" default="-1">
                  <xsd:annotation>
                        <xsd:documentation>'max_depth' defines the maximum depth of recursion to perform when a recurse_direction is specified. A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on. The default value is '-1' meaning no limitation. Note that the default recurse_direction behavior is 'none' so even though max_depth specifies no limitation by default, the recurse_direction behavior turns recusion off.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:integer">
                              <xsd:fractionDigits value="0"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="recurse_direction" use="optional" default="none">
                  <xsd:annotation>
                        <xsd:documentation>'recurse_direction' defines the direction, either 'up' to parent directories, or 'down' into child directories to recursively search for files. When recursing up or down, one is limited by the max_depth behavior. Note that it is not an error if max_depth specifies a certain level of recursion and that level does not exist. Recursing should only go as deep as available. The default value is 'none' for no recursion.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="none"/>
                              <xsd:enumeration value="up"/>
                              <xsd:enumeration value="down"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true"/>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false"/>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ================================  GROUP TEST  ================================= -->
      <!-- =============================================================================== -->
      <xsd:element name="group_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The group_test allows the different users that belong to specific groups (identified by name) to be tested. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a group_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="grouptst">
                              <sch:rule context="win-def:group_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:group_object/@id"><sch:value-of select="../@id"/> - the object child element of a group_test must reference a group_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:group_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:group_state/@id"><sch:value-of select="../@id"/> - the state child element of a group_test must reference a group_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="group_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The group_object element is used by a group test to define the specific group(s) (identified by name) to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="group" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The group element holds a string that represents the name of a particular group. In Windows, group names are case-insensitive and thus case does not matter for this entity. In a domain environment, groups should be identified in the form: "domain\group name" For local groups use: "computer name\group name" For built-in accounts on the system, use the group name without a domain. For example: ADMINISTRATORS, etc. Note that the built-in group names should be all caps to help improve readability as that is how the windows apis return them. Of course techincally it does not matter since the names are case-insensitive.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="groupobjgroup">
                                                                        <sch:rule context="win-def:group_object/win-def:group">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the group entity of a group_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="group_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The group_state element enumerates the different users associate with a Windows group. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="group" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The group element holds a string that represents the name of a particular group. In Windows, group names are case-insensitive and thus case does not matter for this entity. In a domain environment, groups should be identified in the form: "domain\group name" For local groups use: "computer name\group name" For built-in accounts on the system, use the group name without a domain. For example: ADMINISTRATORS, etc. Note that the built-in group names should be all caps to help improve readability as that is how the windows apis return them. Of course techincally it does not matter since the names are case-insensitive.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="groupstegroup">
                                                            <sch:rule context="win-def:group_state/win-def:group">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the group entity of a group_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="user" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The user element holds a string that represents the name of a particular user. In Windows, user names are case-insensitive and thus case does not matter for this entity. In a domain environment, users should be identified in the form: "domain\user name" For local users use: "computer name\user name" For built-in accounts on the system, use the user name without a domain. For example: ADMINISTRATOR, SYSTEM, etc. Note that the built-in user names should be all caps to help improve readability as that is how the windows apis return them. Of course techincally it does not matter since the names are case-insensitive.</xsd:documentation>
                                                <xsd:documentation>The user element can be included multiple times in a system characteristic item in order to record that a group contains a number of different users. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like user that refer to items that can occur an unbounded number of times.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="groupsteuser">
                                                            <sch:rule context="win-def:group_state/win-def:user">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the user entity of a group_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ==============================  GROUP SID TEST  =============================== -->
      <!-- =============================================================================== -->
      <xsd:element name="group_sid_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The group_sid_test allows the different users that belong to specific groups (identified by SID) to be tested. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a group_sid_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="groupsidtst">
                              <sch:rule context="win-def:group_sid_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:group_sid_object/@id"><sch:value-of select="../@id"/> - the object child element of a group_sid_test must reference a group_sid_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:group_sid_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:group_sid_state/@id"><sch:value-of select="../@id"/> - the state child element of a group_sid_test must reference a group_sid_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="group_sid_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The group_sid_object element is used by a group_test to define the specific group(s) (identified by SID) to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="group_sid" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The group_sid entity holds a string that represents the SID of a particular group.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="groupsidobjgroup">
                                                                        <sch:rule context="win-def:group_sid_object/win-def:group_sid">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the group_sid entity of a group_sid_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="group_sid_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The group_state element enumerates the different users associated with a Windows group. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="group_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The group_sid entity holds a string that represents the SID of a particular group.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="groupsidstegroup">
                                                            <sch:rule context="win-def:group_sid_state/win-def:group_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the group_sid entity of a group_sid_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="user_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The user entity holds a string that represents the SID of a particular user.  This entity can be included multiple times in a system characteristic item in order to record that a group contains a number of different users. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like user that refer to items that can occur an unbounded number of times.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="groupsidsteuser">
                                                            <sch:rule context="win-def:group_sid_state/win-def:user_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the user_sid entity of a group_sid_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ==============================  INTERFACE TEST  =============================== -->
      <!-- =============================================================================== -->
      <xsd:element name="interface_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The interface test enumerate various attributes about the interfaces on a system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references an interface_object and the optional state element specifies the interface information to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="wininterfacetst">
                              <sch:rule context="win-def:interface_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:interface_object/@id"><sch:value-of select="../@id"/> - the object child element of an interface_test must reference an interface_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:interface_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:interface_state/@id"><sch:value-of select="../@id"/> - the state child element of an interface_test must reference an interface_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="interface_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The interface_object element is used by an interface test to define the specific interfaces(s) to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
                  <xsd:documentation>An interface object consists of a single name entity that identifies which interface is being specified. For help understanding this object, see the MIB_IFROW and MIB_IPADDRROW structures.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="name" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The name element specifies the name of an interface.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="wininterfaceobjname">
                                                                        <sch:rule context="win-def:interface_object/win-def:name">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the name entity of a interface_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="interface_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The interface_state element enumerates the different properties associate with a Windows interface. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The name element specifies the name of an interface.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wininterfacestename">
                                                            <sch:rule context="win-def:interface_state/win-def:name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the name entity of an interface_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="index" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The index element specifies index that identifies the interface.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wininterfacesteindex">
                                                            <sch:rule context="win-def:interface_state/win-def:index">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the index entity of an interface_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="type" type="win-def:EntityStateInterfaceTypeType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The type element specifies the type of interface which is limited to certain set of values.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wininterfacestetype">
                                                            <sch:rule context="win-def:interface_state/win-def:type">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the type entity of an interface_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="hardware_addr" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The hardware_addr element specifies the the physical address of the adapter for this interface.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wininterfacestehardware_addr">
                                                            <sch:rule context="win-def:interface_state/win-def:hardware_addr">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hardware_addr entity of an interface_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="inet_addr" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The inet_addr element specifies the IP address.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wininterfacesteinet_addr">
                                                            <sch:rule context="win-def:interface_state/win-def:inet_addr">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the inet_addr entity of an interface_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="broadcast_addr" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The broadcast_addr element specifies the broadcast address. A broadcast address is typically the IP address with the host portion set to either all zeros or all ones.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wininterfacestebroadcast_addr">
                                                            <sch:rule context="win-def:interface_state/win-def:broadcast_addr">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the broadcast_addr entity of an interface_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="netmask" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The netmask element specifies the subnet mask for the IP address.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wininterfacestenetmask">
                                                            <sch:rule context="win-def:interface_state/win-def:netmask">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the netmask entity of an interface_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="addr_type" type="win-def:EntityStateAddrTypeType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The addr_type element specifies the address type or state of a specific interface. Each interface can be associated with more than one value meaning the addr_type element can occur multiple times in a system characteristic item. Note that the entity_check attribute associated with EntityStateAddrTypeType guides the evaluation of unbounded entities like addr_type.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wininterfacesteaddr_type">
                                                            <sch:rule context="win-def:interface_state/win-def:addr_type">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the addr_type entity of an interface_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ============================  LOCKOUT POLICY TEST  ============================ -->
      <!-- =============================================================================== -->
      <xsd:element name="lockoutpolicy_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The lockout policy test enumerates various attributes associated with lockout information for users and global groups in the security database. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a lockoutpolicy_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="lptst">
                              <sch:rule context="win-def:lockoutpolicy_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:lockoutpolicy_object/@id"><sch:value-of select="../@id"/> - the object child element of a lockoutpolicy_test must reference a lockoutpolicy_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:lockoutpolicy_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:lockoutpolicy_state/@id"><sch:value-of select="../@id"/> - the state child element of a lockoutpolicy_test must reference a lockoutpolicy_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="lockoutpolicy_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The lockoutpolicy_object element is used by a lockout policy test to define those objects to evaluated based on a specified state. There is actually only one object relating to lockout policy and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check lockout policy will reference the same lockoutpolicy_object which is basically an empty object element.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType"/>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="lockoutpolicy_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The lockoutpolicy_state element specifies the various attributes associated with lockout information for users and global groups in the security database. A lockout policy test will reference a specific instance of this state that defines the exact settings that need to be evaluated. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="force_logoff" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies, in seconds, the amount of time between the end of the valid logon time and the time when the user is forced to log off the network. A value of TIMEQ_FOREVER (-1) indicates that the user is never forced to log off. A value of zero indicates that the user will be forced to log off immediately when the valid logon time expires. See the USER_MODALS_INFO_0 structure returned by a call to NetUserModalsGet().</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="lpsteforce_logoff">
                                                            <sch:rule context="win-def:lockoutpolicy_state/win-def:force_logoff">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the force_logoff entity of a lockoutpolicy_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="lockout_duration" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies, in seconds, how long a locked account remains locked before it is automatically unlocked. See the USER_MODALS_INFO_3 structure returned by a call to NetUserModalsGet().</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="lpstelockout_duration">
                                                            <sch:rule context="win-def:lockoutpolicy_state/win-def:lockout_duration">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the lockout_duration entity of a lockoutpolicy_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="lockout_observation_window" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies the maximum time, in seconds, that can elapse between any two failed logon attempts before lockout occurs. See the USER_MODALS_INFO_3 structure returned by a call to NetUserModalsGet().</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="lpstelockout_observation_window">
                                                            <sch:rule context="win-def:lockoutpolicy_state/win-def:lockout_observation_window">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the lockout_observation_window entity of a lockoutpolicy_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="lockout_threshold" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies the number of invalid password authentications that can occur before an account is marked "locked out." See the USER_MODALS_INFO_3 structure returned by a call to NetUserModalsGet().</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="lpstelockout_threshold">
                                                            <sch:rule context="win-def:lockoutpolicy_state/win-def:lockout_threshold">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the lockout_threshold entity of a lockoutpolicy_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ===============================  METABASE TEST  =============================== -->
      <!-- =============================================================================== -->
      <xsd:element name="metabase_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The metabase test is used to check information found in the Windows metabase. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a metabase_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="metabasetst">
                              <sch:rule context="win-def:metabase_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:metabase_object/@id"><sch:value-of select="../@id"/> - the object child element of a metabase_test must reference a metabase_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:metabase_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:metabase_state/@id"><sch:value-of select="../@id"/> - the state child element of a metabase_test must reference a metabase_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="metabase_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The metabase_object element is used by a metabase test to define the specific metabase item(s) to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
                  <xsd:documentation>A metabase object defines the key and id of the item(s).</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="key" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The key element specifies a metabase key.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="metabaseobjkey">
                                                                        <sch:rule context="win-def:metabase_object/win-def:key">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a metabase_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="id" type="oval-def:EntityObjectIntType" nillable="true">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The id element specifies a particular object under the metabase key. If the nillable attribute is set to true, then the object being specified is the higher level key. In this case, the id element should not be collected or used in analysis. Setting nil equal to true is different than using a .* pattern match, says to collect every id under a given key. The most likely use for xsi:nil within a metabase object is when checking for the existence of a particular key, without regards to the different ids associated with it.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <valid_datatypes>integer</valid_datatypes>
                                                                  <valid_operators>equals, not equal, greater than, less than, greater than or equal, less than or equal</valid_operators>
                                                                  <sch:pattern id="metabaseobjid">
                                                                        <sch:rule context="win-def:metabase_object/win-def:id">
                                                                              <sch:assert test="@datatype='int'">
                                                                                    <sch:value-of select="../@id"/> - datatype attribute for the id entity of a metabase_object should be 'int'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="metabase_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The metabase_state element defines the different metadata associate with a metabase item. This includes the name, user type, data type, and the actual data. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="key" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The key element specifies a metabase key.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="metabasestekey">
                                                            <sch:rule context="win-def:metabase_state/win-def:key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a metabase_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="id" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The id element specifies a particular object under the metabase key.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="metabasesteid">
                                                            <sch:rule context="win-def:metabase_state/win-def:id">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the id entity of a metabase_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The name element describes the name of the specified metabase object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="metabasestename">
                                                            <sch:rule context="win-def:metabase_state/win-def:name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the name entity of a metabase_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="user_type" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The user_type element is a DWORD that specifies the user type of the data. See the METADATA_RECORD structure.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="metabasesteuser_type">
                                                            <sch:rule context="win-def:metabase_state/win-def:user_type">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the user_type entity of a metabase_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="data_type" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The data_type element identifies the type of data in the metabase entry. See the METADATA_RECORD structure.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="metabasestedata_type">
                                                            <sch:rule context="win-def:metabase_state/win-def:data_type">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the data_type entity of a metabase_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="data" type="oval-def:EntityStateAnyType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The actual data of the named item under the specified metabase key</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="metabasestedata">
                                                            <sch:rule context="win-def:metabase_state/win-def:data">
                                                                  <sch:assert test="(@datatype='int' and (floor(.) = number(.))) or not(@datatype='int') or not(node())"><sch:value-of select="../@id"/> - The datatype has been set to 'int' but the value is not an integer.</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ===========================  PASSWORD POLICY TEST  ============================ -->
      <!-- =============================================================================== -->
      <xsd:element name="passwordpolicy_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The password policy test is used to check specific policy associated with passwords. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a passwordpolicy_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:documentation>NOTE: This information is stored in the SAM or Active Directory but is encrypted or hidden so the registry_test and activedirectory_test are of no use. If this can be figured out, then the password_policy test is not needed.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="pptst">
                              <sch:rule context="win-def:passwordpolicy_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:passwordpolicy_object/@id"><sch:value-of select="../@id"/> - the object child element of a passwordpolicy_test must reference a passwordpolicy_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:passwordpolicy_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:passwordpolicy_state/@id"><sch:value-of select="../@id"/> - the state child element of a passwordpolicy_test must reference a passwordpolicy_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="passwordpolicy_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The passwordpolicy_object element is used by a password policy test to define those objects to evaluated based on a specified state. There is actually only one object relating to password policy and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check password policy will reference the same passwordpolicy_object which is basically an empty object element.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType"/>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="passwordpolicy_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The passwordpolicy_state element specifies the various policies associated with passwords. A password policy test will reference a specific instance of this state that defines the exact settings that need to be evaluated.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="max_passwd_age" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies, in seconds, the maximum allowable password age. A value of TIMEQ_FOREVER (-1) indicates that the password never expires. The minimum valid value for this element is ONE_DAY (86400).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ppstemax_passwd_age">
                                                            <sch:rule context="win-def:passwordpolicy_state/win-def:max_passwd_age">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the max_passwd_age entity of a passwordpolicy_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="min_passwd_age" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies the minimum number of seconds that can elapse between the time a password changes and when it can be changed again. A value of zero indicates that no delay is required between password updates.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ppstemin_passwd_age">
                                                            <sch:rule context="win-def:passwordpolicy_state/win-def:min_passwd_age">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the min_passwd_age entity of a passwordpolicy_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="min_passwd_len" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies the minimum allowable password length. Valid values for this element are zero through PWLEN.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ppstemin_passwd_len">
                                                            <sch:rule context="win-def:passwordpolicy_state/win-def:min_passwd_len">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the min_passwd_len entity of a passwordpolicy_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="password_hist_len" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies the length of password history maintained. A new password cannot match any of the previous usrmod0_password_hist_len passwords. Valid values for this element are zero through DEF_MAX_PWHIST.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ppstepassword_hist_len">
                                                            <sch:rule context="win-def:passwordpolicy_state/win-def:password_hist_len">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the password_hist_len entity of a passwordpolicy_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="password_complexity" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>A boolean value that signifies whether passwords must meet the complexity requirements put forth by the operating system.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ppstepassword_complexity">
                                                            <sch:rule context="win-def:passwordpolicy_state/win-def:password_complexity">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the password_complexity entity of an passwordpolicy_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="reversible_encryption" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Determines whether Windows 2000 Server, Windows 2000 Professional, and Windows XP Professional store passwords using reversible encryption.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="ppstereversible_encryption">
                                                            <sch:rule context="win-def:passwordpolicy_state/win-def:reversible_encryption">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the reversible_encryption entity of an passwordpolicy_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- =================================  PORT TEST  ================================= -->
      <!-- =============================================================================== -->
      <xsd:element name="port_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The port test is used to check information about the available ports on a Windows system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a port_object and the optional state element specifies the port information to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="winporttst">
                              <sch:rule context="win-def:port_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:port_object/@id"><sch:value-of select="../@id"/> - the object child element of a port_test must reference a port_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:port_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:port_state/@id"><sch:value-of select="../@id"/> - the state child element of a port_test must reference a port_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="port_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The port_object element is used by a port test to define the specific port(s) to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
                  <xsd:documentation>A port object defines the local address, port number, and protocol of the port(s).</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="local_address" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>This element specifies the local IP address the listening port is bound to.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="winportobjlocal_address">
                                                                        <sch:rule context="win-def:port_object/win-def:local_address">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the local_address entity of a port_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="local_port" type="oval-def:EntityObjectIntType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>This element specifies the number assigned to the local listening port.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="winportobjlocal_port">
                                                                        <sch:rule context="win-def:port_object/win-def:local_port">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the local_port entity of a port_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="protocol" type="win-def:EntityObjectProtocolType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>This element specifies the type of listening port. It is restricted to either TCP or UDP.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="winportobjprotocol">
                                                                        <sch:rule context="win-def:port_object/win-def:protocol">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the protocol entity of a port_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="port_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The port_state element defines the different metadata associate with a Windows port. This includes the local address, port number, protocol, and pid. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="local_address" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the local IP address the listening port is bound to.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="winportstelocal_address">
                                                            <sch:rule context="win-def:port_state/win-def:local_address">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the local_address entity of a port_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="local_port" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the number assigned to the local listening port.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="winportstelocal_port">
                                                            <sch:rule context="win-def:port_state/win-def:local_port">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the local_port entity of a port_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="protocol" type="win-def:EntityStateProtocolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the type of listening port. It is restricted to either TCP or UDP.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="winportsteprotocol">
                                                            <sch:rule context="win-def:port_state/win-def:protocol">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the protocol entity of a port_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="pid" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The id given to the process that is associated with the specified listening port.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="winportstepid">
                                                            <sch:rule context="win-def:port_state/win-def:pid">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the pid entity of a port_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- =======================  PRINTER EFFECTIVE RIGHTS TEST  ======================= -->
      <!-- =============================================================================== -->
      <xsd:element name="printereffectiverights_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The printer effective rights test is used to check the effective rights associated with Windows printers. The printereffectiverights_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a printereffectiverights_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="pertst">
                              <sch:rule context="win-def:printereffectiverights_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:printereffectiverights_object/@id"><sch:value-of select="../@id"/> - the object child element of a printereffectiverights_test must reference a printereffectiverights_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:printereffectiverights_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:printereffectiverights_state/@id"><sch:value-of select="../@id"/> - the state child element of a printereffectiverights_test must reference a printereffectiverights_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="printereffectiverights_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation/>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="behaviors" type="win-def:PrinterEffectiveRightsBehaviors" minOccurs="0"/>
                                                <xsd:element name="printer_name" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The printer_name element describes a printer that a user may have rights on.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="perobjprinter_name">
                                                                        <sch:rule context="win-def:printereffectiverights_object/win-def:printer_name">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the kprinter_nameey entity of a printereffectiverights_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="trustee_sid" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The trustee_sid element is the unique sid that associated a user, group, system, or program (such as a Windows service).</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="perobjtrustee_sid">
                                                                        <sch:rule context="win-def:printereffectiverights_object/win-def:trustee_sid">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a printereffectiverights_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="printereffectiverights_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The regkeyeffectiverights_state element defines the different rights that can be associated with a given regkeyeffectiverights_object. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="printer_name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the name of the printer.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rersteprinter_name">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:printer_name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the printer_name entity of a printereffectiverights_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The trustee_sid element is the unique sid that associated a user, group, system, or program (such as a Windows service).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstetrustee_sid">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:trustee_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a printereffectiverights_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_delete" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to delete the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstestandard_delete">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:standard_delete">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_delete entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_read_control" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to read the information in the object's security descriptor, not including the information in the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstestandard_read_control">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:standard_read_control">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_read_control entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_dac" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to modify the DACL in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstestandard_write_dac">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:standard_write_dac">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_dac entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_owner" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to change the owner in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstestandard_write_owner">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:standard_write_owner">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_owner entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_synchronize" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Windows NT/2000: The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstestandard_synchronize">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:standard_synchronize">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_synchronize entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_system_security" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Indicates access to a system access control list (SACL).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="persteaccess_system_security">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:access_system_security">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the access_system_security entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_read" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstegeneric_read">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:generic_read">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_read entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_write" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Write access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstegeneric_write">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:generic_write">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_write entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_execute" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstegeneric_execute">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:generic_execute">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_execute entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_all" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read, write, and execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstegeneric_all">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:generic_all">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_all entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="printer_access_administer" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="persteprinter_access_administer">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:printer_access_administer">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the printer_access_administer entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="printer_access_use" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="persteprinter_access_use">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:printer_access_use">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the printer_access_use entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="job_access_administer" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstejob_access_administer">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:job_access_administer">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the job_access_administer entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="job_access_read" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="perstejob_access_read">
                                                            <sch:rule context="win-def:printereffectiverights_state/win-def:job_access_read">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the job_access_read entity of a printereffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="PrinterEffectiveRightsBehaviors">
            <xsd:annotation>
                  <xsd:documentation>The PrinterEffectiveRightsBehaviors complex type defines a number of behaviors that allow a more detailed definition of the pritnereffectiverights objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true"/>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false"/>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ===============================  PROCESS TEST  ================================ -->
      <!-- =============================================================================== -->
      <xsd:element name="process_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The process test is used to check information found in the Windows processes. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a process_object and the optional state element specifies the process information to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="processtst">
                              <sch:rule context="win-def:process_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:process_object/@id"><sch:value-of select="../@id"/> - the object child element of a process_test must reference a process_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:process_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:process_state/@id"><sch:value-of select="../@id"/> - the state child element of a process_test must reference a process_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="process_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The process_object element is used by a process test to define the specific process(es) to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
                  <xsd:documentation>A process object defines the command line used to start the process(s).</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="command_line" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The command_line entity is the string used to start the process. This includes any parameters that are part of the command line.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="processobjcommand_line">
                                                                        <sch:rule context="win-def:process_object/win-def:command_line">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the command_line entity of a process_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="process_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The process_state element defines the different metadata associate with a Windows process. This includes the command line, pid, ppid, image path, and current directory. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="command_line" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The command_line entity is the string used to start the process. This includes any parameters that are part of the command line.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="processstecommand_line">
                                                            <sch:rule context="win-def:process_state/win-def:command_line">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the command_line entity of a process_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="pid" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The id given to the process that is created for a specified command line.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="processstepid">
                                                            <sch:rule context="win-def:port_state/win-def:pid">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the pid entity of a port_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="ppid" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The id given to the parent of the process that is created for the specified command line</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="processsteppid">
                                                            <sch:rule context="win-def:port_state/win-def:ppid">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the ppid entity of a port_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="priority" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The base priority of the process.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="processstepriority">
                                                            <sch:rule context="win-def:process_state/win-def:priority">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the priority entity of a process_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="image_path" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The image_path entity contains the name of the executable file in question.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="processsteimage_path">
                                                            <sch:rule context="win-def:process_state/win-def:image_path">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the image_path entity of a process_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="current_dir" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The current_directory entity represents the current path to the executable.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="processstecurrent_dir">
                                                            <sch:rule context="win-def:process_state/win-def:current_dir">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the current_dir entity of a process_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ===============================  REGISTRY TEST  =============================== -->
      <!-- =============================================================================== -->
      <xsd:element name="registry_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The registry test is used to check metadata associated with Windows registry key. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a registry_object and the optional state element specifies the registry data to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="regtst">
                              <sch:rule context="win-def:registry_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:registry_object/@id"><sch:value-of select="../@id"/> - the object child element of a registry_test must reference a registry_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:registry_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:registry_state/@id"><sch:value-of select="../@id"/> - the state child element of a registry_test must reference a registry_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="registry_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation/>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="behaviors" type="win-def:RegistryBehaviors" minOccurs="0"/>
                                                <xsd:element name="hive" type="win-def:EntityObjectRegistryHiveType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The hive that the registry key belongs to. This is restricted to a specific set of values: HKEY_CLASSES_ROOT, HKEY_CURRENT_CONFIG, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, and HKEY_USERS.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="regobjhive">
                                                                        <sch:rule context="win-def:registry_object/win-def:hive">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hive entity of a registry_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="key" type="oval-def:EntityObjectStringType" nillable="true">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The key element describes a registry key to be collected. Note that the hive portion of the string should not be included, as this data should be found under the hive element. If the nillable attribute is set to true, then the object being specified is the higher level hive. In this case, the key element should not be collected or used in analysis. Setting nil equal to true is different than using a .* pattern match. A .* pattern match says to collect every key under a given hive. Note that when nil is used for the key element, the name element should also be nilled.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="regobjkey">
                                                                        <sch:rule context="win-def:registry_object/win-def:key">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a registry_object should be 'string'</sch:assert>
                                                                              <sch:assert test="not(@xsi:nil='true') or ../win-def:name/@xsi:nil='true'"><sch:value-of select="../@id"/> - name entity must be nil when key is nil</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="name" type="oval-def:EntityObjectStringType" nillable="true">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The name element describes the name assigned to a value associated with a specific registry key. If the nillable attribute is set to true, then the object being specified is the higher level hive/key. In this case, the name element should not be collected or used in analysis. Setting nil equal to true on an element is different than using a .* pattern match. A .* pattern match says to collect every name under a given hive/key. The most likely use for xsi:nil within a registry object is when checking for the existence of a particular key, without regards to the different names associated with it.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="regobjname">
                                                                        <sch:rule context="win-def:registry_object/win-def:name">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the name entity of a registry_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="registry_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The registry_state element defines the different metadata associate with a Windows registry key. This includes the hive, key, name, type, and value. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="hive" type="win-def:EntityStateRegistryHiveType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The hive that the registry key belongs to. This is restricted to a specific set of values: HKEY_CLASSES_ROOT, HKEY_CURRENT_CONFIG, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, and HKEY_USERS.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="regstehive">
                                                            <sch:rule context="win-def:registry_state/win-def:hive">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hive entity of a registry_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element describes a registry key to be tested. Note that the hive portion of the string should not be inclueded, as this data should be found under the hive element.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="regstekey">
                                                            <sch:rule context="win-def:registry_state/win-def:key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a registry_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element describes the name of a value of a registry key. If the nillable attribute is set to true, then the name element should not be used in analysis.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="regstename">
                                                            <sch:rule context="win-def:registry_state/win-def:name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the name entity of a registry_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="type" type="win-def:EntityStateRegistryTypeType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The type entity allows a test to be written against the registy type associated with the specified registry key(s). Please refer to the documentation on the EntityStateRegistryTypeType for more information about the different valid individual types.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <valid_datatypes>string</valid_datatypes>
                                                      <valid_operators>equals, not equal</valid_operators>
                                                      <sch:pattern id="regstetype">
                                                            <sch:rule context="win-def:registry_state/win-def:type">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the type entity of a registry_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="value" type="oval-def:EntityStateAnyType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The value entity allows a test to be written against the value held within the specified registry key(s). If the value being tested is of type REG_BINARY, then the datatype attribute should be set to 'binary' and the data represented by the value entity should follow the xsd:hexBinary form. (each binary octet is encoded as two hex digits) If the value being tested is of type REG_DWORD or REG_QWORD, then the datatype attribute should be set to 'int' and the value entity should represent the data as an integer. If the value being tested is of type REG_EXPAND_SZ, then the datatype attribute should be set to 'string' and the pre-expanded string should be represented by the value entity. If the value being tested is of type REG_MULTI_SZ, then only a single string (one of the multiple strings) should be tested using the value entity with the datatype attribute set to 'string'. In order to test multiple values, multiple OVAL registry tests should be used. If the specified registry key is of type REG_SZ, then the datatype should be 'string' and the value entity should be a copy of the string.</xsd:documentation>
                                                <xsd:documentation>Note that if the intention is to test a version number held in the registry (as a reg_sz) then instead of setting the datatype to 'string', the datatype can be set to 'version'. This allows tools performing the evaluation to know how to perform less than and greater than operations correctly.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="regstevalue">
                                                            <sch:rule context="win-def:registry_state/win-def:value">
                                                                  <sch:assert test="(@datatype='int' and (floor(.) = number(.))) or not(@datatype='int') or not(node())"><sch:value-of select="../@id"/> - The datatype has been set to 'int' but the value is not an integer.</sch:assert>
                                                                  <!-- we can use the xpath 2.0 function matches() to define assertions for other datatypes -->
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="RegistryBehaviors">
            <xsd:annotation>
                  <xsd:documentation>The RegistryBehaviors complex type defines a number of behaviors that allow a more detailed definition of the registry objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="max_depth" use="optional" default="-1">
                  <xsd:annotation>
                        <xsd:documentation>'max_depth' defines the maximum depth of recursion to perform when a recurse_direction is specified. A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on. The default value is '-1' meaning no limitation. Note that the default recurse_direction behavior is 'none' so even though max_depth specifies no limitation by default, the recurse_direction behavior turns recusion off.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:integer">
                              <xsd:fractionDigits value="0"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="recurse_direction" use="optional" default="none">
                  <xsd:annotation>
                        <xsd:documentation>'recurse_direction' defines the direction, either 'up' to parent keys, or 'down' into child keys to recursively search for registry keys. When recursing up or down, one is limited by the max_depth behavior. Note that it is not an error if max_depth specifies a certain level of recursion and that level does not exist. Recursing should only go as deep as available. The default value is 'none' for no recursion.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="none"/>
                              <xsd:enumeration value="up"/>
                              <xsd:enumeration value="down"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ===================  REGKEY AUDITED PERMISSIONS TEST (53)  ==================== -->
      <!-- =============================================================================== -->
      <xsd:element name="regkeyauditedpermissions53_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The registry key audited permissions test is used to check the audit permissions associated with Windows registry keys. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a regkeyauditedpermissions53_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="rap53tst">
                              <sch:rule context="win-def:regkeyauditedpermissions53_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:regkeyauditedpermissions53_object/@id"><sch:value-of select="../@id"/> - the object child element of a regkeyauditedpermissions53_test must reference a regkeyauditedpermissions53_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:regkeyauditedpermissions53_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:regkeyauditedpermissions53_state/@id"><sch:value-of select="../@id"/> - the state child element of a regkeyauditedpermissions53_test must reference a regkeyauditedpermissions53_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="regkeyauditedpermissions53_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The regkeyauditedpermissions53_object element is used by a registry key audited permissions test to define the objects used to evalutate against the specified state. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic.</xsd:documentation>
                  <xsd:documentation>A regkeyauditedpermissions53_object is defined as a combination of a Windows registry key and trustee name. The hive and key elements represents the registry key to be evaluated while the trustee name represents the account (sid) to check audited permissions of. If multiple keys or sids are matched by either reference, then each possible combination of file and sid is a matching file audited permissions object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the RegkeyAuditPermissions53Behaviors complex type for more information about specific behaviors.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="behaviors" type="win-def:RegkeyAuditPermissions53Behaviors" minOccurs="0"/>
                                                <xsd:element name="hive" type="win-def:EntityObjectRegistryHiveType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The hive that the registry key belongs to. This is restricted to a specific set of values: HKEY_CLASSES_ROOT, HKEY_CURRENT_CONFIG, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, and HKEY_USERS.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rap53objhive">
                                                                        <sch:rule context="win-def:regkeyauditedpermissions53_object/win-def:hive">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hive entity of a regkeyauditedpermissions53_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="key" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The key element describes a registry key to be collected. Note that the hive portion of the string should not be included, as this data should be found under the hive element.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rap53objkey">
                                                                        <sch:rule context="win-def:regkeyauditedpermissions53_object/win-def:key">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a regkeyauditedpermissions53_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="trustee_sid" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                          <xsd:documentation>The trustee_sid element is the unique sid that associated a user, group, system, or program (such as a Windows service).  If a pattern match operation is used attempts to identify all the trustees (for exampl a .* pattern) then the search should be limited to just the trustees on the DACL/SACL of the object in question.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rap53objtrustee_sid">
                                                                        <sch:rule context="win-def:regkeyauditedpermissions53_object/win-def:trustee_sid">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a regkeyauditedpermissions53_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="regkeyauditedpermissions53_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The regkeyauditedpermissions53_state element defines the different audit permissions that can be associated with a given regkeyauditedpermissions53_object. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="hive" type="win-def:EntityStateRegistryHiveType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the hive of a registry key on the machine from which to retrieve the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stehive">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:hive">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hive entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies a registry key on the machine from which to retrieve the SACL. Note that the hive portion of the string should not be inclueded, as this data should be found under the hive element.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stekey">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The trustee_sid element is the unique sid that associated a user, group, system, or program (such as a Windows service).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stetrustee_sid">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:trustee_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_delete" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to delete the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stestandard_delete">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:standard_delete">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_delete entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_read_control" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to read the information in the object's security descriptor, not including the information in the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stestandard_read_control">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:standard_read_control">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_read_control entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_dac" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to modify the DACL in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stestandard_write_dac">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:standard_write_dac">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_dac entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_owner" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to change the owner in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stestandard_write_owner">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:standard_write_owner">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_owner entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_synchronize" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Windows NT/2000: The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stestandard_synchronize">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:standard_synchronize">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_synchronize entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_system_security" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Indicates access to a system access control list (SACL).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53steaccess_system_security">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:access_system_security">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the access_system_security entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_read" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stegeneric_read">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:generic_read">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_read entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_write" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Write access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stegeneric_write">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:generic_write">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_write entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_execute" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stegeneric_execute">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:generic_execute">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_execute entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_all" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read, write, and execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stegeneric_all">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:generic_all">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_all entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_query_value" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stekey_query_value">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:key_query_value">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_query_value entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_set_value" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stekey_set_value">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:key_set_value">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_set_value entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_create_sub_key" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stekey_create_sub_key">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:key_create_sub_key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_create_sub_key entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_enumerate_sub_keys" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stekey_enumerate_sub_keys">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:key_enumerate_sub_keys">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_enumerate_sub_keys entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_notify" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stekey_notify">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:key_notify">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_notify entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_create_link" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stekey_create_link">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:key_create_link">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_create_link entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_64key" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stekey_wow64_64key">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:key_wow64_64key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_64key entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_32key" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stekey_wow64_32key">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:key_wow64_32key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_32key entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_res" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rap53stekey_wow64_res">
                                                            <sch:rule context="win-def:regkeyauditedpermissions53_state/win-def:key_wow64_res">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_res entity of a regkeyauditedpermissions53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="RegkeyAuditPermissions53Behaviors">
            <xsd:annotation>
                  <xsd:documentation>The RegkeyAuditPermissions53Behaviors complex type defines a number of behaviors that allow a more detailed definition of the registrykeyauditedpermissions53_object being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="max_depth" use="optional" default="-1">
                  <xsd:annotation>
                        <xsd:documentation>'max_depth' defines the maximum depth of recursion to perform when a recurse_direction is specified. A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on. The default value is '-1' meaning no limitation. Note that the default recurse_direction behavior is 'none' so even though max_depth specifies no limitation by default, the recurse_direction behavior turns recusion off.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:integer">
                              <xsd:fractionDigits value="0"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="recurse_direction" use="optional" default="none">
                  <xsd:annotation>
                        <xsd:documentation>'recurse_direction' defines the direction, either 'up' to parent keys, or 'down' into child keys to recursively search for registry keys. When recursing up or down, one is limited by the max_depth behavior. Note that it is not an error if max_depth specifies a certain level of recursion and that level does not exist. Recursing should only go as deep as available. The default value is 'none' for no recursion.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="none"/>
                              <xsd:enumeration value="up"/>
                              <xsd:enumeration value="down"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true"/>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false"/>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ===============  REGKEY AUDITED PERMISSIONS TEST (deprecated)  ================ -->
      <!-- =============================================================================== -->
      <xsd:element name="regkeyauditedpermissions_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>This test has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer regkeyauditedpermissions53_test.</xsd:documentation>
                  <xsd:documentation>The registry key audited permissions test is used to check the audit permissions associated with Windows registry keys. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a regkeyauditedpermissions_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="raptst">
                              <sch:rule context="win-def:regkeyauditedpermissions_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:regkeyauditedpermissions_object/@id"><sch:value-of select="../@id"/> - the object child element of a regkeyauditedpermissions_test must reference a regkeyauditedpermissions_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:regkeyauditedpermissions_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:regkeyauditedpermissions_state/@id"><sch:value-of select="../@id"/> - the state child element of a regkeyauditedpermissions_test must reference a regkeyauditedpermissions_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="regkeyauditedpermissions_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>This object has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer regkeyauditedpermissions53_object.</xsd:documentation>
                  <xsd:documentation>The regkeyauditedpermissions_object element is used by a registry key audited permissions test to define the objects used to evalutate against the specified state. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic.</xsd:documentation>
                  <xsd:documentation>A regkeyauditedpermissions_object is defined as a combination of a Windows registry key and trustee name. The hive and key elements represents the registry key to be evaluated while the trustee name represents the account (sid) to check audited permissions of. If multiple keys or sids are matched by either reference, then each possible combination of file and sid is a matching file audited permissions object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the RegkeyAuditPermissionsBehaviors complex type for more information about specific behaviors.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="behaviors" type="win-def:RegkeyAuditPermissionsBehaviors" minOccurs="0"/>
                                                <xsd:element name="hive" type="win-def:EntityObjectRegistryHiveType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The hive that the registry key belongs to. This is restricted to a specific set of values: HKEY_CLASSES_ROOT, HKEY_CURRENT_CONFIG, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, and HKEY_USERS.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rapobjhive">
                                                                        <sch:rule context="win-def:regkeyauditedpermissions_object/win-def:hive">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hive entity of a regkeyauditedpermissions_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="key" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The key element describes a registry key to be collected. Note that the hive portion of the string should not be included, as this data should be found under the hive element.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rapobjkey">
                                                                        <sch:rule context="win-def:regkeyauditedpermissions_object/win-def:key">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a regkeyauditedpermissions_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="trustee_name" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The trustee_name element is the unique name that associated a particular SID. A SID can be associated with a user, group, or program (such as a Windows service). In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rapobjtrustee_name">
                                                                        <sch:rule context="win-def:regkeyauditedpermissions_object/win-def:trustee_name">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a regkeyauditedpermissions_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="regkeyauditedpermissions_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>This state has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer regkeyauditedpermissions53_state.</xsd:documentation>
                  <xsd:documentation>The regkeyauditedpermissions_state element defines the different audit permissions that can be associated with a given regkeyauditedpermissions_object. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="hive" type="win-def:EntityStateRegistryHiveType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the hive of a registry key on the machine from which to retrieve the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstehive">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:hive">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hive entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies a registry key on the machine from which to retrieve the SACL. Note that the hive portion of the string should not be inclueded, as this data should be found under the hive element.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstekey">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The unique name associated with a particular security identifier (SID). In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstetrustee_name">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:trustee_name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_delete" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to delete the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstestandard_delete">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:standard_delete">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_delete entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_read_control" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to read the information in the object's security descriptor, not including the information in the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstestandard_read_control">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:standard_read_control">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_read_control entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_dac" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to modify the DACL in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstestandard_write_dac">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:standard_write_dac">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_dac entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_owner" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to change the owner in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstestandard_write_owner">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:standard_write_owner">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_owner entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_synchronize" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Windows NT/2000: The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstestandard_synchronize">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:standard_synchronize">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the standard_synchronize entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_system_security" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Indicates access to a system access control list (SACL).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapsteaccess_system_security">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:access_system_security">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the access_system_security entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_read" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstegeneric_read">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:generic_read">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_read entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_write" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Write access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstegeneric_write">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:generic_write">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_write entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_execute" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstegeneric_execute">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:generic_execute">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_execute entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_all" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read, write, and execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstegeneric_all">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:generic_all">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the generic_all entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_query_value" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstekey_query_value">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:key_query_value">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_query_value entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_set_value" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstekey_set_value">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:key_set_value">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_set_value entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_create_sub_key" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstekey_create_sub_key">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:key_create_sub_key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_create_sub_key entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_enumerate_sub_keys" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstekey_enumerate_sub_keys">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:key_enumerate_sub_keys">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_enumerate_sub_keys entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_notify" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstekey_notify">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:key_notify">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_notify entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_create_link" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstekey_create_link">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:key_create_link">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_create_link entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_64key" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstekey_wow64_64key">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:key_wow64_64key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_64key entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_32key" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstekey_wow64_32key">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:key_wow64_32key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_32key entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_res" type="win-def:EntityStateAuditType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rapstekey_wow64_res">
                                                            <sch:rule context="win-def:regkeyauditedpermissions_state/win-def:key_wow64_res">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_res entity of a regkeyauditedpermissions_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="RegkeyAuditPermissionsBehaviors">
            <xsd:annotation>
                  <xsd:documentation>The RegkeyAuditPermissionsBehaviors complex type defines a number of behaviors that allow a more detailed definition of the registrykeyauditedpermissions objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="max_depth" use="optional" default="-1">
                  <xsd:annotation>
                        <xsd:documentation>'max_depth' defines the maximum depth of recursion to perform when a recurse_direction is specified. A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on. The default value is '-1' meaning no limitation. Note that the default recurse_direction behavior is 'none' so even though max_depth specifies no limitation by default, the recurse_direction behavior turns recusion off.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:integer">
                              <xsd:fractionDigits value="0"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="recurse_direction" use="optional" default="none">
                  <xsd:annotation>
                        <xsd:documentation>'recurse_direction' defines the direction, either 'up' to parent keys, or 'down' into child keys to recursively search for registry keys. When recursing up or down, one is limited by the max_depth behavior. Note that it is not an error if max_depth specifies a certain level of recursion and that level does not exist. Recursing should only go as deep as available. The default value is 'none' for no recursion.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="none"/>
                              <xsd:enumeration value="up"/>
                              <xsd:enumeration value="down"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true"/>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false"/>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ====================  REGKEY EFFECTIVE RIGHTS TEST (53)  ====================== -->
      <!-- =============================================================================== -->
      <xsd:element name="regkeyeffectiverights53_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The registry key effective rights test is used to check the effective rights associated with Windows files. Note that the trustee's effective access rights are the access rights that the ACL grants to the trustee or to any groups of which the trustee is a member. The regkeyeffectiverights53_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a regkeyeffectiverights53_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="rer53tst">
                              <sch:rule context="win-def:regkeyeffectiverights53_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:regkeyeffectiverights53_object/@id"><sch:value-of select="../@id"/> - the object child element of a regkeyeffectiverights53_test must reference a regkeyeffectiverights53_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:regkeyeffectiverights53_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:regkeyeffectiverights53_state/@id"><sch:value-of select="../@id"/> - the state child element of a regkeyeffectiverights53_test must reference a regkeyeffectiverights53_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="regkeyeffectiverights53_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The regkeyeffectiverights53_object element is used by a registry key effective rights test to define the objects used to evalutate against the specified state. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic.</xsd:documentation>
                  <xsd:documentation>A regkeyeffectiverights53_object is defined as a combination of a Windows registry and trustee sid. The key entity represents the registry key to be evaluated while the trustee sid represents the account (sid) to check effective rights of. If multiple files or sids are matched by either reference, then each possible combination of file and sid is a matching file effective rights object. In addition, a number of behaviors may be provided that help guide the collection of objects. Please refer to the FileEffectiveRights53Behaviors complex type for more information about specific behaviors.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="behaviors" type="win-def:RegkeyEffectiveRights53Behaviors" minOccurs="0"/>
                                                <xsd:element name="hive" type="win-def:EntityObjectRegistryHiveType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The hive that the registry key belongs to. This is restricted to a specific set of values: HKEY_CLASSES_ROOT, HKEY_CURRENT_CONFIG, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, and HKEY_USERS.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rer53objhive">
                                                                        <sch:rule context="win-def:regkeyeffectiverights53_object/win-def:hive">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hive entity of a regkeyeffectiverights53_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="key" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The key element describes a registry key to be collected. Note that the hive portion of the string should not be included, as this data should be found under the hive element.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rer53objkey">
                                                                        <sch:rule context="win-def:regkeyeffectiverights53_object/win-def:key">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a regkeyeffectiverights53_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="trustee_sid" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                          <xsd:documentation>The trustee_sid element is the unique sid that associated a user, group, system, or program (such as a Windows service).  If a pattern match operation is used attempts to identify all the trustees (for exampl a .* pattern) then the search should be limited to just the trustees on the DACL/SACL of the object in question.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rer53objtrustee_sid">
                                                                        <sch:rule context="win-def:regkeyeffectiverights53_object/win-def:trustee_sid">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a regkeyeffectiverights53_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="regkeyeffectiverights53_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The regkeyeffectiverights53_state element defines the different rights that can be associated with a given regkeyeffectiverights53_object. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="hive" type="win-def:EntityStateRegistryHiveType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the hive of a registry key on the machine from which to retrieve the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stehive">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:hive">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hive entity of a regkeyeffectiverights53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies a registry key on the machine from which to retrieve the SACL. Note that the hive portion of the string should not be inclueded, as this data should be found under the hive element.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stekey">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a regkeyeffectiverights53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The trustee_sid element is the unique sid that associated a user, group, system, or program (such as a Windows service).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stetrustee_sid">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:trustee_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a regkeyeffectiverights53_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_delete" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to delete the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stestandard_delete">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:standard_delete">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_delete entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_read_control" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to read the information in the object's security descriptor, not including the information in the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stestandard_read_control">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:standard_read_control">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_read_control entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_dac" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to modify the DACL in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stestandard_write_dac">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:standard_write_dac">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_dac entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_owner" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to change the owner in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stestandard_write_owner">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:standard_write_owner">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_owner entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_synchronize" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Windows NT/2000: The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stestandard_synchronize">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:standard_synchronize">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_synchronize entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_system_security" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Indicates access to a system access control list (SACL).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53steaccess_system_security">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:access_system_security">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the access_system_security entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_read" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stegeneric_read">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:generic_read">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_read entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_write" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Write access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stegeneric_write">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:generic_write">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_write entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_execute" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stegeneric_execute">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:generic_execute">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_execute entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_all" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read, write, and execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stegeneric_all">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:generic_all">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_all entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_query_value" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stekey_query_value">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:key_query_value">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_query_value entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_set_value" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stekey_set_value">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:key_set_value">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_set_value entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_create_sub_key" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stekey_create_sub_key">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:key_create_sub_key">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_create_sub_key entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_enumerate_sub_keys" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stekey_enumerate_sub_keys">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:key_enumerate_sub_keys">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_enumerate_sub_keys entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_notify" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stekey_notify">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:key_notify">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_notify entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_create_link" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stekey_create_link">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:key_create_link">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_create_link entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_64key" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stekey_wow64_64key">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:key_wow64_64key">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_64key entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_32key" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stekey_wow64_32key">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:key_wow64_32key">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_32key entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_res" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rer53stekey_wow64_res">
                                                            <sch:rule context="win-def:regkeyeffectiverights53_state/win-def:key_wow64_res">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_res entity of a regkeyeffectiverights53_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="RegkeyEffectiveRights53Behaviors">
            <xsd:annotation>
                  <xsd:documentation>The RegkeyEffectiveRights53Behaviors complex type defines a number of behaviors that allow a more detailed definition of the registrykeyeffectiverights53_object being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="max_depth" use="optional" default="-1">
                  <xsd:annotation>
                        <xsd:documentation>'max_depth' defines the maximum depth of recursion to perform when a recurse_direction is specified. A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on. The default value is '-1' meaning no limitation. Note that the default recurse_direction behavior is 'none' so even though max_depth specifies no limitation by default, the recurse_direction behavior turns recusion off.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:integer">
                              <xsd:fractionDigits value="0"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="recurse_direction" use="optional" default="none">
                  <xsd:annotation>
                        <xsd:documentation>'recurse_direction' defines the direction, either 'up' to parent keys, or 'down' into child keys to recursively search for registry keys. When recursing up or down, one is limited by the max_depth behavior. Note that it is not an error if max_depth specifies a certain level of recursion and that level does not exist. Recursing should only go as deep as available. The default value is 'none' for no recursion.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="none"/>
                              <xsd:enumeration value="up"/>
                              <xsd:enumeration value="down"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true"/>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false"/>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ================  REGKEY EFFECTIVE RIGHTS TEST (deprecated)  ================== -->
      <!-- =============================================================================== -->
      <xsd:element name="regkeyeffectiverights_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>This test has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer regkeyeffectiverights53_test.</xsd:documentation>
                  <xsd:documentation>The registry key effective rights test is used to check the effective rights associated with Windows files. Note that the trustee's effective access rights are the access rights that the ACL grants to the trustee or to any groups of which the trustee is a member. The regkeyeffectiverights_test element extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a regkeyeffectiverights_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="rertst">
                              <sch:rule context="win-def:regkeyeffectiverights_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:regkeyeffectiverights_object/@id"><sch:value-of select="../@id"/> - the object child element of a regkeyeffectiverights_test must reference a regkeyeffectiverights_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:regkeyeffectiverights_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:regkeyeffectiverights_state/@id"><sch:value-of select="../@id"/> - the state child element of a regkeyeffectiverights_test must reference a regkeyeffectiverights_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="regkeyeffectiverights_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>This object has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer regkeyeffectiverights53_object.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="behaviors" type="win-def:RegkeyEffectiveRightsBehaviors" minOccurs="0"/>
                                                <xsd:element name="hive" type="win-def:EntityObjectRegistryHiveType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The hive that the registry key belongs to. This is restricted to a specific set of values: HKEY_CLASSES_ROOT, HKEY_CURRENT_CONFIG, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, and HKEY_USERS.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rerobjhive">
                                                                        <sch:rule context="win-def:regkeyeffectiverights_object/win-def:hive">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hive entity of a regkeyeffectiverights_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="key" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The key element describes a registry key to be collected. Note that the hive portion of the string should not be included, as this data should be found under the hive element.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rerobjkey">
                                                                        <sch:rule context="win-def:regkeyeffectiverights_object/win-def:key">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a regkeyeffectiverights_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="trustee_name" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The trustee_name element is the unique name that associated a particular SID. A SID can be associated with a user, group, or program (such as a Windows service). In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="rerobjtrustee_name">
                                                                        <sch:rule context="win-def:regkeyeffectiverights_object/win-def:trustee_name">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a regkeyeffectiverights_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="regkeyeffectiverights_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>This state has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer regkeyeffectiverights53_state.</xsd:documentation>
                  <xsd:documentation>The regkeyeffectiverights_state element defines the different rights that can be associated with a given regkeyeffectiverights_object. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="hive" type="win-def:EntityStateRegistryHiveType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the hive of a registry key on the machine from which to retrieve the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstehive">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:hive">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the hive entity of a regkeyeffectiverights_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies a registry key on the machine from which to retrieve the SACL. Note that the hive portion of the string should not be inclueded, as this data should be found under the hive element.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstekey">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:key">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the key entity of a regkeyeffectiverights_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The unique name associated with a particular security identifier (SID). In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstetrustee_name">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:trustee_name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a regkeyeffectiverights_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_delete" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to delete the object.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstestandard_delete">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:standard_delete">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_delete entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_read_control" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to read the information in the object's security descriptor, not including the information in the SACL.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstestandard_read_control">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:standard_read_control">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_read_control entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_dac" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to modify the DACL in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstestandard_write_dac">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:standard_write_dac">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_dac entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_write_owner" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The right to change the owner in the object's security descriptor.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstestandard_write_owner">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:standard_write_owner">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_write_owner entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="standard_synchronize" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Windows NT/2000: The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstestandard_synchronize">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:standard_synchronize">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the standard_synchronize entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_system_security" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Indicates access to a system access control list (SACL).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rersteaccess_system_security">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:access_system_security">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the access_system_security entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_read" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstegeneric_read">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:generic_read">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_read entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_write" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Write access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstegeneric_write">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:generic_write">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_write entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_execute" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstegeneric_execute">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:generic_execute">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_execute entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="generic_all" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Read, write, and execute access.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstegeneric_all">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:generic_all">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the generic_all entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_query_value" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstekey_query_value">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:key_query_value">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_query_value entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_set_value" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstekey_set_value">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:key_set_value">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_set_value entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_create_sub_key" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstekey_create_sub_key">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:key_create_sub_key">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_create_sub_key entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_enumerate_sub_keys" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstekey_enumerate_sub_keys">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:key_enumerate_sub_keys">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_enumerate_sub_keys entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_notify" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstekey_notify">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:key_notify">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_notify entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_create_link" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstekey_create_link">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:key_create_link">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_create_link entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_64key" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstekey_wow64_64key">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:key_wow64_64key">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_64key entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_32key" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstekey_wow64_32key">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:key_wow64_32key">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_32key entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="key_wow64_res" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation/>
                                                <xsd:appinfo>
                                                      <sch:pattern id="rerstekey_wow64_res">
                                                            <sch:rule context="win-def:regkeyeffectiverights_state/win-def:key_wow64_res">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the key_wow64_res entity of a regkeyeffectiverights_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="RegkeyEffectiveRightsBehaviors">
            <xsd:annotation>
                  <xsd:documentation>The RegkeyEffectiveRightsBehaviors complex type defines a number of behaviors that allow a more detailed definition of the registrykeyeffectiverights objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="max_depth" use="optional" default="-1">
                  <xsd:annotation>
                        <xsd:documentation>'max_depth' defines the maximum depth of recursion to perform when a recurse_direction is specified. A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on. The default value is '-1' meaning no limitation. Note that the default recurse_direction behavior is 'none' so even though max_depth specifies no limitation by default, the recurse_direction behavior turns recusion off.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:integer">
                              <xsd:fractionDigits value="0"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="recurse_direction" use="optional" default="none">
                  <xsd:annotation>
                        <xsd:documentation>'recurse_direction' defines the direction, either 'up' to parent keys, or 'down' into child keys to recursively search for registry keys. When recursing up or down, one is limited by the max_depth behavior. Note that it is not an error if max_depth specifies a certain level of recursion and that level does not exist. Recursing should only go as deep as available. The default value is 'none' for no recursion.</xsd:documentation>
                  </xsd:annotation>
                  <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                              <xsd:enumeration value="none"/>
                              <xsd:enumeration value="up"/>
                              <xsd:enumeration value="down"/>
                        </xsd:restriction>
                  </xsd:simpleType>
            </xsd:attribute>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true"/>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false"/>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ===========================  SHARED RESOURCE TEST   =========================== -->
      <!-- =============================================================================== -->
      <xsd:element name="sharedresource_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The shared resource test is used to check properties associated with any shared resource on the system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a sid_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="srtst">
                              <sch:rule context="win-def:sharedresource_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:sharedresource_object/@id"><sch:value-of select="../@id"/> - the object child element of a sharedresource_test must reference a sharedresource_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:sharedresource_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:sharedresource_state/@id"><sch:value-of select="../@id"/> - the state child element of a sharedresource_test must reference a sharedresource_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="sharedresource_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The sharedresource_object element is used by a shared resource test to define the object, in this case a shared resource, to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
                  <xsd:documentation>An shared resource object consists of a single netname entity that identifies a specific shared resource.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set"/>
                                          <xsd:sequence>
                                                <xsd:element name="netname" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The netname element is the unique name that is associated with a specific shared resource.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="srobjnetname">
                                                                        <sch:rule context="win-def:sharedresource_object/win-def:netname">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the netname entity of a sharedresource_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="sharedresource_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The sharedresource_state element defines the different metadata associate with a Windows shared resource. This includes the share type, permissions, and max uses. This state mirror the SHARE_INFO_2 structure. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="netname" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the name associated with a particular shared resource.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srstenetname">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:netname">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the netname entity of a sharedresource_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="shared_type" type="win-def:EntityStateSharedResourceTypeType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The type of the shared resource.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srsteshared_type">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:shared_type">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the shared_type entity of a sharedresource_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="max_uses" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The maximum number of concurrent connections that the shared resource can accommodate.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srstemax_uses">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:max_uses">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the max_uses entity of a sharedresource_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="current_uses" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The number of current connections to the resource.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srstecurrent_uses">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:current_uses">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the current_uses entity of a sharedresource_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="local_path" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The local path for the shared resource.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srstelocal_path">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:local_path">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the local_path entity of a sharedresource_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_read_permission" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Permission to read data from a resource and, by default, to execute the resource.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srsteaccess_read_permission">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:access_read_permission">
                                                                  <sch:assert test="@datatype='boolean'">
                                                                        <sch:value-of select="../@id"/> - datatype attribute for the access_read_permission entity of a sharedresource_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_write_permission" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Permission to write data to the resource.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srsteaccess_write_permission">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:access_write_permission">
                                                                  <sch:assert test="@datatype='boolean'">
                                                                        <sch:value-of select="../@id"/> - datatype attribute for the access_write_permission entity of a sharedresource_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_create_permission" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Permission to create an instance of the resource (such as a file); data can be written to the resource as the resource is created.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srsteaccess_create_permission">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:access_create_permission">
                                                                  <sch:assert test="@datatype='boolean'">
                                                                        <sch:value-of select="../@id"/> - datatype attribute for the access_create_permission entity of a sharedresource_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_exec_permission" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Permission to execute the resource.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srsteaccess_exec_permission">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:access_exec_permission">
                                                                  <sch:assert test="@datatype='boolean'">
                                                                        <sch:value-of select="../@id"/> - datatype attribute for the access_exec_permission entity of a sharedresource_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_delete_permission" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Permission to delete the resource.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srsteaccess_delete_permission">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:access_delete_permission">
                                                                  <sch:assert test="@datatype='boolean'">
                                                                        <sch:value-of select="../@id"/> - datatype attribute for the access_delete_permission entity of a sharedresource_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_atrib_permission" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Permission to modify the resource's attributes (such as the date and time when a file was last modified).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srsteaccess_atrib_permission">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:access_atrib_permission">
                                                                  <sch:assert test="@datatype='boolean'">
                                                                        <sch:value-of select="../@id"/> - datatype attribute for the access_atrib_permission entity of a sharedresource_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_perm_permission" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Permission to modify the permissions (read, write, create, execute, and delete) assigned to a resource for a user or application.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srsteaccess_perm_permission">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:access_perm_permission">
                                                                  <sch:assert test="@datatype='boolean'">
                                                                        <sch:value-of select="../@id"/> - datatype attribute for the access_perm_permission entity of a sharedresource_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="access_all_permission" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Permission to read, write, create, execute, and delete resources, and to modify their attributes and permissions.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="srsteaccess_all_permission">
                                                            <sch:rule context="win-def:sharedresource_state/win-def:access_all_permission">
                                                                  <sch:assert test="@datatype='boolean'">
                                                                        <sch:value-of select="../@id"/> - datatype attribute for the access_all_permission entity of a sharedresource_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- =================================  SID TEST   ================================= -->
      <!-- =============================================================================== -->
      <xsd:element name="sid_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The sid test is used to check properties associated with the specified sid. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a sid_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="sidtst">
                              <sch:rule context="win-def:sid_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:sid_object/@id"><sch:value-of select="../@id"/> - the object child element of a sid_test must reference a sid_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:sid_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:sid_state/@id"><sch:value-of select="../@id"/> - the state child element of a sid_test must reference a sid_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="sid_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The sid_object element is used by a sid_test to define the object set, in this case a set of sids (identified by name), to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set"/>
                                          <xsd:sequence>
                                                <xsd:element name="behaviors" type="win-def:SidBehaviors" minOccurs="0"/>
                                                <xsd:element name="trustee_name" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The trustee_name element is the unique name that associated a particular SID. A SID can be associated with a user, group, or program (such as a Windows service). In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="sidobjtrustee_name">
                                                                        <sch:rule context="win-def:sid_object/win-def:trustee_name">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a sid_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="sid_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The sid_state element defines the different metadata associate with a Windows trustee (identified by name).  Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="trustee_name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the trustee name associated with a particular SID. In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="sidstetrustee_name">
                                                            <sch:rule context="win-def:sid_state/win-def:trustee_name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a sid_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The security identifier (SID) of the specified trustee name.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="sidstetrustee_sid">
                                                            <sch:rule context="win-def:sid_state/win-def:trustee_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a sid_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_domain" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The domain of the specified trustee name.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="sidstetrustee_domain">
                                                            <sch:rule context="win-def:sid_state/win-def:trustee_domain">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_domain entity of a sid_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="SidBehaviors">
            <xsd:annotation>
                  <xsd:documentation>The SidBehaviors complex type defines a number of behaviors that allow a more detailed definition of the sid objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true">
                  <xsd:annotation>
                        <xsd:documentation>'include_group' defines whether the group sid should be included in the object when the object is defined by a group sid. For example, the intension of an object defined by a group sid might be to retrieve all the user sids that are a member of the group, but not the group sid itself.</xsd:documentation>
                  </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false">
                  <xsd:annotation>
                        <xsd:documentation>'resolve_group' defines whether an object defined by a group sid should be resolved to return all the user sids that are a member of that group.</xsd:documentation>
                  </xsd:annotation>
            </xsd:attribute>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- ===============================  SID SID TEST   =============================== -->
      <!-- =============================================================================== -->
      <xsd:element name="sid_sid_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The sid_sid_test is used to check properties associated with the specified sid. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a sid_sid_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:documentation>Note that this sid_sid test was added in version 5.4 as a temporary fix.  There is a need within the community to identify things like users and groups by both the name and the sid.  For version 6 of OVAL, work is underway for a better solution to the problem, but for now, a second test was added to satisfy the need.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="sidsidtst">
                              <sch:rule context="win-def:sid_sid_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:sid_sid_object/@id"><sch:value-of select="../@id"/> - the object child element of a sid_sid_test must reference a sid_sid_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:sid_sid_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:sid_sid_state/@id"><sch:value-of select="../@id"/> - the state child element of a sid_sid_test must reference a sid_sid_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="sid_sid_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The sid_sid_object element is used by a sid_sid_test to define the object set, in this case a set of sids, to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set"/>
                                          <xsd:sequence>
                                                <xsd:element name="behaviors" type="win-def:SidSidBehaviors" minOccurs="0"/>
                                                <xsd:element name="trustee_sid" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The trustee_sid entity is a SID that can be associated with a user, group, or program (such as a Windows service).</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="sidsidobjtrustee_name">
                                                                        <sch:rule context="win-def:sid_sid_object/win-def:trustee_sid">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a sid_sid_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="sid_sid_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The sid_state element defines the different metadata associate with a Windows trustee (identified by SID).  Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="trustee_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The security identifier (SID) of the specified trustee name.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="sidsidstetrustee_sid">
                                                            <sch:rule context="win-def:sid_sid_state/win-def:trustee_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_sid entity of a sid_sid_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element specifies the trustee name associated with a particular SID. In a domain environment, trustee names should be identified in the form: "domain\trustee name" For local trustee names use: "computer name\trustee name" For built-in accounts on the system, use the trustee name without a domain. For example: ADMINISTRATOR, SYSTEM, NETWORK_SERVICES, ADMINISTRATORS (group), etc. Note that the built-in trustee names should be all caps as that is how the windows apis return them.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="sidsidstetrustee_name">
                                                            <sch:rule context="win-def:sid_sid_state/win-def:trustee_name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_name entity of a sid_sid_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="trustee_domain" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The domain of the specified trustee name.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="sidsidstetrustee_domain">
                                                            <sch:rule context="win-def:sid_sid_state/win-def:trustee_domain">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the trustee_domain entity of a sid_sid_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:complexType name="SidSidBehaviors">
            <xsd:annotation>
                  <xsd:documentation>The SidSidBehaviors complex type defines a number of behaviors that allow a more detailed definition of the sid objects being specified.</xsd:documentation>
            </xsd:annotation>
            <xsd:attribute name="include_group" type="xsd:boolean" use="optional" default="true">
                  <xsd:annotation>
                        <xsd:documentation>'include_group' defines whether the group sid should be included in the object when the object is defined by a group sid. For example, the intension of an object defined by a group sid might be to retrieve all the user sids that are a member of the group, but not the group sid itself.</xsd:documentation>
                  </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="resolve_group" type="xsd:boolean" use="optional" default="false">
                  <xsd:annotation>
                        <xsd:documentation>'resolve_group' defines whether an object defined by a group sid should be resolved to return all the user sids that are a member of that group.</xsd:documentation>
                  </xsd:annotation>
            </xsd:attribute>
      </xsd:complexType>
      <!-- =============================================================================== -->
      <!-- =========================  USER ACCESS CONTROL TEST  ========================== -->
      <!-- =============================================================================== -->
      <xsd:element name="uac_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The user access control test is used to check setting related to User Access Control within Windows. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a uaac_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="uactst">
                              <sch:rule context="win-def:uac_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:uac_object/@id"><sch:value-of select="../@id"/> - the object child element of a uac_test must reference a uac_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:uac_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:uac_state/@id"><sch:value-of select="../@id"/> - the state child element of a uac_test must reference a uac_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="uac_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The uac_object element is used by a user access control test to define those objects to evaluate based on a specified state. There is actually only one object relating to user access control and this is the system as a whole. Therefore, there are no child entities defined. Any OVAL Test written to check user access control settings will reference the same uac_object which is basically an empty object element.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType"/>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="uac_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The uac_state element specifies the different settings that are available under User Access Control. A user access control test will reference a specific instance of this state that defines the exact settings that need to be evaluated. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="admin_approval_mode" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Admin Approval Mode for the Built-in Administrator account.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="uacsteadminapprovalmode">
                                                            <sch:rule context="win-def:uac_state/win-def:admin_approval_mode">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the admin_approval_mode entity of a uac_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="elevation_prompt_admin" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Behavior of the elevation prompt for administrators in Admin Approval Mode.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="uacstebehaviorelevationadmin">
                                                            <sch:rule context="win-def:uac_state/win-def:elevation_prompt_admin">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the elevation_prompt_admin entity of a uac_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="elevation_prompt_standard" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Behavior of the elevation prompt for standard users.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="uacsteelevationpromptstandard">
                                                            <sch:rule context="win-def:uac_state/win-def:elevation_prompt_standard">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the elevation_prompt_standard entity of a uac_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="detect_installations" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Detect application installations and prompt for elevation.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="uacstedetectinstallations">
                                                            <sch:rule context="win-def:uac_state/win-def:detect_installations">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the detect_installations entity of a uac_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="elevate_signed_executables" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Only elevate executables that are signed and validated.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="uacsteelevatesignedexecutables">
                                                            <sch:rule context="win-def:uac_state/win-def:elevate_signed_executables">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the elevate_signed_executables entity of a uac_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="elevate_uiaccess" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Only elevate UIAccess applications that are installed in secure locations.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="uacsteelevateuiaccess">
                                                            <sch:rule context="win-def:uac_state/win-def:elevate_uiaccess">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the elevate_uiaccess entity of a uac_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="run_admins_aam" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Run all administrators in Admin Approval Mode.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="uacsterunadminsaam">
                                                            <sch:rule context="win-def:uac_state/win-def:run_admins_aam">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the run_admins_aam entity of a uac_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="secure_desktop" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Switch to the secure desktop when prompting for elevation.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="uacstesecuredesktop">
                                                            <sch:rule context="win-def:uac_state/win-def:secure_desktop">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the secure_desktop entity of a uac_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="virtualize_write_failures" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Virtualize file and registry write failures to per-user locations.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="uacstevirtualizewritefailures">
                                                            <sch:rule context="win-def:uac_state/win-def:virtualize_write_failures">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the virtualize_write_failures entity of a uac_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- =================================  USER TEST  ================================= -->
      <!-- =============================================================================== -->
      <xsd:element name="user_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The user test is used to check information about Windows users. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a user_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="usertst">
                              <sch:rule context="win-def:user_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:user_object/@id"><sch:value-of select="../@id"/> - the object child element of a user_test must reference a user_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:user_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:user_state/@id"><sch:value-of select="../@id"/> - the state child element of a user_test must reference a user_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="user_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation/>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="user" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The user entity holds a string that represents the name of a particular user. In Windows, user names are case-insensitive and thus case does not matter for this entity. In a domain environment, users should be identified in the form: "domain\user name" For local users use: "computer name\user name" For built-in accounts on the system, use the user name without a domain. For example: ADMINISTRATOR, SYSTEM, etc. Note that the built-in user names should be all caps to help improve readability as that is how the windows apis return them. Of course techincally it does not matter since the names are case-insensitive.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="userobjuser">
                                                                        <sch:rule context="win-def:user_object/win-def:user">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the user entity of a user_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="user_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The user_state element enumerates the different groups (identified by name) that a Windows user might belong to. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="user" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The user entity holds a string that represents the name of a particular user. In Windows, user names are case-insensitive and thus case does not matter for this entity. In a domain environment, users should be identified in the form: "domain\user name" For local users use: "computer name\user name" For built-in accounts on the system, use the user name without a domain. For example: ADMINISTRATOR, SYSTEM, etc. Note that the built-in user names should be all caps to help improve readability as that is how the windows apis return them. Of course techincally it does not matter since the names are case-insensitive.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="usersteuser">
                                                            <sch:rule context="win-def:user_state/win-def:user">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the user entity of a user_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="enabled" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element holds a boolean value that specifies whether the particular user account is enabled or not.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="usersteenabled">
                                                            <sch:rule context="win-def:user_state/win-def:enabled">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the enabled entity of a user_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="group" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>A string the represents the name of a particular group. In Windows, group names are case-insensitive and thus case does not matter for this entity. In a domain environment, groups should be identified in the form: "domain\group name" For local groups use: "computer name\group name" For built-in accounts on the system, use the group name without a domain. For example: ADMINISTRATORS, etc. Note that the built-in group names should be all caps as that is how the windows apis return them. Of course techincally it does not matter since the names are case-insensitive.</xsd:documentation>
                                                <xsd:documentation>The group element can be included multiple times in a system characteristic item in order to record that a user can be a member of a number of different groups. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like group that refer to items that can occur an unbounded number of times.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="userstegroup">
                                                            <sch:rule context="win-def:user_state/win-def:group">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the group entity of a user_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
    <!-- =============================================================================== -->
    <!-- ============================  USER SID TEST (55)  ============================= -->
    <!-- =============================================================================== -->
    <xsd:element name="user_sid55_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The user_sid55_test is used to check information about Windows users. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a user_sid55_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="usersid55tst">
                    <sch:rule context="win-def:user_sid55_test/win-def:object">
                        <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:user_sid55_object/@id"><sch:value-of select="../@id"/> - the object child element of a user_sid55_test must reference a user_sid55_object</sch:assert>
                    </sch:rule>
                    <sch:rule context="win-def:user_sid55_test/win-def:state">
                        <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:user_sid55_state/@id"><sch:value-of select="../@id"/> - the state child element of a user_sid55_test must reference a user_sid55_state</sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="user_sid55_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The user_sid55_object represents a set of users on a Windows system.  This set (which might contain only one user) is identified by a SID.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set" minOccurs="0"/>
                            <xsd:sequence minOccurs="0">
                                <xsd:element name="user_sid" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The user_sid entity holds a string that represents the SID of a particular user.</xsd:documentation>
                                        <xsd:appinfo>
                                            <sch:pattern id="usersid55objuser">
                                                <sch:rule context="win-def:user_sid55_object/win-def:user_sid">
                                                    <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the user_sid entity of a user_sid55_object should be 'string'</sch:assert>
                                                </sch:rule>
                                            </sch:pattern>
                                        </xsd:appinfo>
                                    </xsd:annotation>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="user_sid55_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The user_sid55_state element enumerates the different groups (identified by SID) that a Windows user might belong to. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="user_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>The user_sid entity holds a string that represents the SID of a particular user.</xsd:documentation>
                                <xsd:appinfo>
                                    <sch:pattern id="usersid55steuser">
                                        <sch:rule context="win-def:user_sid55_state/win-def:user_sid">
                                            <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the user_sid entity of a user_sid55_state should be 'string'</sch:assert>
                                        </sch:rule>
                                    </sch:pattern>
                                </xsd:appinfo>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="enabled" type="oval-def:EntityStateBoolType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>This element holds a boolean value that specifies whether the particular user account is enabled or not.</xsd:documentation>
                                <xsd:appinfo>
                                    <sch:pattern id="usersid55steenabled">
                                        <sch:rule context="win-def:user_sid55_state/win-def:enabled">
                                            <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the enabled entity of a user_sid55_state should be 'boolean'</sch:assert>
                                        </sch:rule>
                                    </sch:pattern>
                                </xsd:appinfo>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="group_sid" type="oval-def:EntityStateStringType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>A string the represents the SID of a particular group.  The group_sid element can be included multiple times in a system characteristic item in order to record that a user can be a member of a number of different groups. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like group that refer to items that can occur an unbounded number of times.</xsd:documentation>
                                <xsd:appinfo>
                                    <sch:pattern id="usersid55stegroup">
                                        <sch:rule context="win-def:user_sid_55state/win-def:group_sid">
                                            <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the group_sid entity of a user_sid55_state should be 'string'</sch:assert>
                                        </sch:rule>
                                    </sch:pattern>
                                </xsd:appinfo>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <!-- =============================================================================== -->
    <!-- ========================  USER SID TEST (deprecated)  ========================= -->
      <!-- =============================================================================== -->
      <xsd:element name="user_sid_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                <xsd:documentation>This test has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer user_sid55_test.</xsd:documentation>
                <xsd:documentation>The user_sid_test is used to check information about Windows users. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a user_sid_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="usersidtst">
                              <sch:rule context="win-def:user_sid_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:user_sid_object/@id"><sch:value-of select="../@id"/> - the object child element of a user_sid_test must reference a user_sid_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:user_sid_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:user_sid_state/@id"><sch:value-of select="../@id"/> - the state child element of a user_sid_test must reference a user_sid_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="user_sid_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                <xsd:documentation>This object has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer user_sid55_object.</xsd:documentation>
                <xsd:documentation>The user_sid_object represents a set of users on a Windows system.  This set (which might contain only one user) is identified by a SID.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="user" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>The user_sid entity holds a string that represents the SID of a particular user.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="usersidobjuser">
                                                                        <sch:rule context="win-def:user_sid_object/win-def:user_sid">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the user_sid entity of a user_sid_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="user_sid_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                <xsd:documentation>This state has been deprecated and will be removed in version 6.0 of the language. Recommend use of the newer user_sid55_state.</xsd:documentation>
                <xsd:documentation>The user_sid_state element enumerates the different groups (identified by SID) that a Windows user might belong to. Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="user" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The user_sid entity holds a string that represents the SID of a particular user.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="usersidsteuser">
                                                            <sch:rule context="win-def:user_sid_state/win-def:user_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the user_sid entity of a user_sid_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="enabled" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>This element holds a boolean value that specifies whether the particular user account is enabled or not.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="usersidsteenabled">
                                                            <sch:rule context="win-def:user_sid_state/win-def:enabled">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the enabled entity of a user_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="group" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>A string the represents the SID of a particular group.  The group_sid element can be included multiple times in a system characteristic item in order to record that a user can be a member of a number of different groups. Note that the entity_check attribute associated with EntityStateStringType guides the evaluation of entities like group that refer to items that can occur an unbounded number of times.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="usersidstegroup">
                                                            <sch:rule context="win-def:user_sid_state/win-def:group_sid">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the group_sid entity of a user_sid_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- ================================  VOLUME TEST  ================================ -->
      <!-- =============================================================================== -->
      <xsd:element name="volume_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The volume test is used to check information about different storage volumes found on a Windows system. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a volume_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="volumetst">
                              <sch:rule context="win-def:volume_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:volume_object/@id"><sch:value-of select="../@id"/> - the object child element of a volume_test must reference a volume_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:volume_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:volume_state/@id"><sch:value-of select="../@id"/> - the state child element of a volume_test must reference a volume_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="volume_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation>The volume_object element is used by a volume test to define the specific volume(s) to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
                  <xsd:documentation>A volume object defines the rootpath of the volume(s).</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="rootpath" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>A string that contains the root directory of the volume to be described. A trailing backslash is required. For example, you would specify \\MyServer\MyShare as "\\MyServer\MyShare\", or the C drive as "C:\".</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="volobjrootpath">
                                                                        <sch:rule context="win-def:volume_object/win-def:rootpath">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the rootpath entity of a volume_object should be 'string'</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="volume_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation>The volume_state element defines the different metadata associate with a storage volume in Windows. This includes the rootpath, the file system type, name, and serial number, as well as any associated flags. Please refer to the individual elements in the schema for more details about what each represents. The GetVolumeInformation function as defined by Microsoft is also a good place to look for information.</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="rootpath" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>A string that contains the root directory of the volume to be described. A trailing backslash is required. For example, you would specify \\MyServer\MyShare as "\\MyServer\MyShare\", or the C drive as "C:\".</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volumesterootpath">
                                                            <sch:rule context="win-def:volume_state/win-def:rootpath">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the rootpath entity of a volume_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_system" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The type of filesystem. For example FAT or NTFS.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volumestefile_system">
                                                            <sch:rule context="win-def:volume_state/win-def:file_system">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the file_system entity of a volume_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The name of the volume.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volumestename">
                                                            <sch:rule context="win-def:volume_state/win-def:name">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the name entity of a volume_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="volume_max_component_length" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The volume_max_component_length element specifies the maximum length, in TCHARs, of a file name component that a specified file system supports. A file name component is the portion of a file name between backslashes. The value that is stored in the variable that *lpMaximumComponentLength points to is used to indicate that a specified file system supports long names. For example, for a FAT file system that supports long names, the function stores the value 255, rather than the previous 8.3 indicator. Long names can also be supported on systems that use the NTFS file system.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstevolume_max_component_length">
                                                            <sch:rule context="win-def:volume_state/win-def:volume_max_component_length">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the volume_max_component_length entity of a volume_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="serial_number" type="oval-def:EntityStateIntType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The volume serial number.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volsteserial_number">
                                                            <sch:rule context="win-def:volume_state/win-def:serial_number">
                                                                  <sch:assert test="@datatype='int'"><sch:value-of select="../@id"/> - datatype attribute for the serial_number entity of a volume_state should be 'int'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_case_sensitive_search" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system supports case-sensitive file names.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_case_sensitive_search">
                                                            <sch:rule context="win-def:volume_state/win-def:file_case_sensitive_search">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_case_sensitive_search entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_case_preserved_names" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system preserves the case of file names when it places a name on disk.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_case_preserved_names">
                                                            <sch:rule context="win-def:volume_state/win-def:file_case_preserved_names">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_case_preserved_names entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_unicode_on_disk" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system supports Unicode in file names as they appear on disk.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_unicode_on_disk">
                                                            <sch:rule context="win-def:volume_state/win-def:file_unicode_on_disk">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_unicode_on_disk entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_persistent_acls" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system preserves and enforces ACLs. For example, NTFS preserves and enforces ACLs, and FAT does not.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_persistent_acls">
                                                            <sch:rule context="win-def:volume_state/win-def:file_persistent_acls">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_persistent_acls entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_file_compression" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system supports file-based compression.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_file_compression">
                                                            <sch:rule context="win-def:volume_state/win-def:file_file_compression">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_file_compression entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_volume_quotas" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system supports disk quotas.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_volume_quotas">
                                                            <sch:rule context="win-def:volume_state/win-def:file_volume_quotas">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_volume_quotas entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_supports_sparse_files" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system supports sparse files.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_supports_sparse_files">
                                                            <sch:rule context="win-def:volume_state/win-def:file_supports_sparse_files">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_supports_sparse_files entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_supports_reparse_points" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system supports reparse points.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_supports_reparse_points">
                                                            <sch:rule context="win-def:volume_state/win-def:file_supports_reparse_points">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_supports_reparse_points entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_supports_remote_storage" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The specified volume is a compressed volume; for example, a DoubleSpace volume.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_supports_remote_storage">
                                                            <sch:rule context="win-def:volume_state/win-def:file_supports_remote_storage">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_supports_remote_storage entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_volume_is_compressed" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The specified volume is a compressed volume; for example, a DoubleSpace volume.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_volume_is_compressed">
                                                            <sch:rule context="win-def:volume_state/win-def:file_volume_is_compressed">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_volume_is_compressed entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_supports_object_ids" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system supports object identifiers.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_supports_object_ids">
                                                            <sch:rule context="win-def:volume_state/win-def:file_supports_object_ids">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_supports_object_ids entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_supports_encryption" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system supports the Encrypted File System (EFS).</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_supports_encryption">
                                                            <sch:rule context="win-def:volume_state/win-def:file_supports_encryption">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_supports_encryption entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_named_streams" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The file system supports named streams.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_named_streams">
                                                            <sch:rule context="win-def:volume_state/win-def:file_named_streams">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_named_streams entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="file_read_only_volume" type="oval-def:EntityStateBoolType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The specified volume is read-only. This flag was added in Windows XP.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="volstefile_read_only_volume">
                                                            <sch:rule context="win-def:volume_state/win-def:file_read_only_volume">
                                                                  <sch:assert test="@datatype='boolean'"><sch:value-of select="../@id"/> - datatype attribute for the file_read_only_volume entity of a volume_state should be 'boolean'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- =================================  WMI TEST  ================================== -->
      <!-- =============================================================================== -->
      <xsd:element name="wmi_test" substitutionGroup="oval-def:test">
            <xsd:annotation>
                  <xsd:documentation>The wmi test is used to check information accessed by WMI. It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a wmi_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
                  <xsd:appinfo>
                        <sch:pattern id="wmitst">
                              <sch:rule context="win-def:wmi_test/win-def:object">
                                    <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:wmi_object/@id"><sch:value-of select="../@id"/> - the object child element of a wmi_test must reference a wmi_object</sch:assert>
                              </sch:rule>
                              <sch:rule context="win-def:wmi_test/win-def:state">
                                    <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:wmi_state/@id"><sch:value-of select="../@id"/> - the state child element of a wmi_test must reference a wmi_state</sch:assert>
                              </sch:rule>
                        </sch:pattern>
                  </xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:TestType">
                              <xsd:sequence>
                                    <xsd:element name="object" type="oval-def:ObjectRefType"/>
                                    <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="wmi_object" substitutionGroup="oval-def:object">
            <xsd:annotation>
                  <xsd:documentation/>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:ObjectType">
                              <xsd:sequence>
                                    <xsd:choice>
                                          <xsd:element ref="oval-def:set" minOccurs="0"/>
                                          <xsd:sequence minOccurs="0">
                                                <xsd:element name="namespace" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>Specifies which WMI namespace to look under. Each WMI provider normally registers its own WMI namespace and then all its classes within that namespace. For example, all Win32 WMI classes can be found in the namespace "root\cimv2", all IIS WMI classes can be found at "root\microsoftiisv2", and all LDAP WMI classes can be found at "root\directory\ldap".</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="wmiobjnamespace">
                                                                        <sch:rule context="win-def:wmi_object/win-def:namespace">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the namespace entity of a wmi_object should be 'string'</sch:assert>
                                                                            <sch:assert test="not(@operation) or @operation='equals'"><sch:value-of select="../@id"/> - operation attribute for the namespace entity of a wmi_object should be 'equals', note that this overrules the general operation attribute validation (i.e. follow this one)</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                                <xsd:element name="wql" type="oval-def:EntityObjectStringType">
                                                      <xsd:annotation>
                                                            <xsd:documentation>A WQL query used to identify the object(s) to test against. Any valid WQL query is usable with one exception, at most one field is allowed in the SELECT portion of the query. For example SELECT name FROM ... is valid, as is SELECT 'true' FROM ..., but SELECT name, number FROM ... is not valid. This is because the result element in the data section is only designed to work against a single field.</xsd:documentation>
                                                            <xsd:appinfo>
                                                                  <sch:pattern id="wmiobjwql">
                                                                        <sch:rule context="win-def:wmi_object/win-def:wql">
                                                                              <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the wql entity of a wmi_object should be 'string'</sch:assert>
                                                                            <sch:assert test="not(@operation) or @operation='equals'"><sch:value-of select="../@id"/> - operation attribute for the wql entity of a wmi_object should be 'equals', note that this overrules the general operation attribute validation (i.e. follow this one)</sch:assert>
                                                                        </sch:rule>
                                                                  </sch:pattern>
                                                            </xsd:appinfo>
                                                      </xsd:annotation>
                                                </xsd:element>
                                          </xsd:sequence>
                                    </xsd:choice>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <xsd:element name="wmi_state" substitutionGroup="oval-def:state">
            <xsd:annotation>
                  <xsd:documentation/>
            </xsd:annotation>
            <xsd:complexType>
                  <xsd:complexContent>
                        <xsd:extension base="oval-def:StateType">
                              <xsd:sequence>
                                    <xsd:element name="namespace" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>Specifies which WMI namespace to look under. Each WMI provider normally registers its own WMI namespace and then all its classes within that namespace. For example, all Win32 WMI classes can be found in the namespace "root\cimv2", all IIS WMI classes can be found at "root\microsoftiisv2", and all LDAP WMI classes can be found at "root\directory\ldap".</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wmistenamespace">
                                                            <sch:rule context="win-def:wmi_state/win-def:namespace">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the namespace entity of a wmi_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="wql" type="oval-def:EntityStateStringType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>A WQL query used to identify the object(s) to test against. Any valid WQL query is usable with one exception, at most one field is allowed in the SELECT portion of the query. For example SELECT name FROM ... is valid, as is SELECT 'true' FROM ..., but SELECT name, number FROM ... is not valid. This is because the result element in the data section is only designed to work against a single field.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wmistewql">
                                                            <sch:rule context="win-def:wmi_state/win-def:wql">
                                                                  <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the wql entity of a wmi_state should be 'string'</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                                    <xsd:element name="result" type="oval-def:EntityStateAnyType" minOccurs="0">
                                          <xsd:annotation>
                                                <xsd:documentation>The result element specifies how to test objects in the result set of the specified WQL statement. Only one comparable field is allowed. So if the WQL statement look like 'SELECT name FROM ...', then a result element with a value of 'Fred' would test that value against the names returned by the WQL statement.</xsd:documentation>
                                                <xsd:appinfo>
                                                      <sch:pattern id="wmisteresult">
                                                            <sch:rule context="win-def:wmi_state/win-def:result">
                                                                  <sch:assert test="(@datatype='int' and (floor(.) = number(.))) or not(@datatype='int') or not(node())"><sch:value-of select="../@id"/> - The datatype has been set to 'int' but the value is not an integer.</sch:assert>
                                                            </sch:rule>
                                                      </sch:pattern>
                                                </xsd:appinfo>
                                          </xsd:annotation>
                                    </xsd:element>
                              </xsd:sequence>
                        </xsd:extension>
                  </xsd:complexContent>
            </xsd:complexType>
      </xsd:element>
      <!-- =============================================================================== -->
      <!-- =========================  WUA UPDATE SEARCHER TEST  ========================== -->
      <!-- =============================================================================== -->
    <xsd:element name="wuaupdatesearcher_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>The wuaupdatesearcher_test is used to evaluate patch level in a Windows environment utilizing the WUA (Windows Update Agent) interface.  It is based on the Search method of the IUpdateSearcher interface found in the WUA API.  It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information. The required object element references a wmi_object and the optional state element specifies the metadata to check. The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
            <xsd:documentation>Note that WUA can work off of many different sources including WSUS, update.microsoft.com, and a local cab file.  The content source is specific to a given system evaluating a wuaupdatesearcher_test and thus is not defined by this test.  The tool being used for evaluation should determine what content source is best for the system being assessed and then evaluate this test based on that selection.</xsd:documentation>
            <xsd:appinfo>
                <sch:pattern id="wuaupdatesearchertst">
                    <sch:rule context="win-def:wuaupdatesearcher_test/win-def:object">
                        <sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/win-def:wuasearch_object/@id">
                            <sch:value-of select="../@id"/> - the object child element of a wuaupdatesearcher_test must reference a wuaupdatesearcher_object
                        </sch:assert>
                    </sch:rule>
                    <sch:rule context="win-def:wuaupdatesearcher_test/win-def:state">
                        <sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/win-def:wuasearch_state/@id">
                            <sch:value-of select="../@id"/> - the state child element of a wuaupdatesearcher_test must reference a wuaupdatesearcher_state
                        </sch:assert>
                    </sch:rule>
                </sch:pattern>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="wuaupdatesearcher_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>The wuaupdatesearcher_object element is used by a wuaupdatesearcher_test to define the specific search criteria to be evaluated. Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information. The common set element allows complex objects to be created using filters and set logic. Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set" minOccurs="0"/>
                            <xsd:sequence minOccurs="0">
                                <xsd:element name="search_criteria" type="oval-def:EntityObjectStringType">
                                    <xsd:annotation>
                                        <xsd:documentation>The search_criteria entity specifies a search criteria to use when generating a search result.  The string used for the search criteria entity must match the custom search language for Search method of the IUpdateSearcher interface.  The string consists of criteria that are evaluated to determine which updates to return.  The Search method performs a synchronous search for updates by using the current configured search options.   For more information about possible search criteria, please see the Search method of the IUpdateSearcher interface.</xsd:documentation>
                                        <xsd:appinfo>
                                            <sch:pattern id="wuaupdatesearcherobjsearchcriteria">
                                                <sch:rule context="win-def:wuaupdatesearcher_object/win-def:search_criteria">
                                                    <sch:assert test="not(@datatype) or @datatype='string'">
                                                        <sch:value-of select="../@id"/> - datatype attribute for the search_criteria entity of a wuaupdatesearcher_object should be 'string'
                                                    </sch:assert>
                                                    <sch:assert test="not(@operation) or @operation='equals'">
                                                        <sch:value-of select="../@id"/> - operation attribute for the search_criteria entity of a wuaupdatesearcher_object should be 'equals'
                                                    </sch:assert>
                                                </sch:rule>
                                            </sch:pattern>
                                        </xsd:appinfo>
                                    </xsd:annotation>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="wuaupdatesearcher_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>The wuaupdatesearcher_state element defines entities that can be tested related to a uaupdatesearcher_object.  This includes the search criteria and updated id.  Please refer to the individual elements in the schema for more details about what each represents.</xsd:documentation>
        </xsd:annotation>		
        <xsd:complexType>			
            <xsd:complexContent>				
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="search_criteria" type="oval-def:EntityStateStringType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>The search_criteria entity specifies a string to examine the search criteria that was used to generate the object set.  Note that since this entity is part of the state, it is not used to determine the object set, but rather is used to test the search criteria that was actually used.</xsd:documentation>
                                <xsd:appinfo>
                                    <sch:pattern id="wuaupdatesearcherstesearchcriteria">
                                        <sch:rule context="win-def:wuaupdatesearcher_state/win-def:search_criteria">
                                            <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the search_criteria entity of a wuaupdatesearcher_state should be 'string'</sch:assert>
                                        </sch:rule>
                                    </sch:pattern>
                                </xsd:appinfo>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="update_id" type="oval-def:EntityStateStringType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>The update_id enity specifies a string that represents a revision-independent identifier of an update.  This information is part of the IUpdateIdentity interface that is part of the result of the IUpdateSearcher interface's Search method.</xsd:documentation>
                                <xsd:appinfo>
                                    <sch:pattern id="wuaupdatesearchersteupdateid">
                                        <sch:rule context="win-def:wuaupdatesearcher_state/win-def:update_id">
                                            <sch:assert test="not(@datatype) or @datatype='string'"><sch:value-of select="../@id"/> - datatype attribute for the update_id entity of a wuaupdatesearcher_state should be 'string'</sch:assert>
                                        </sch:rule>
                                    </sch:pattern>
                                </xsd:appinfo>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>					
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
      <!-- =============================================================================== -->
      <!-- =============================================================================== -->
      <!-- =============================================================================== -->
      <xsd:complexType name="EntityStateAddrTypeType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateAddrTypeType complex type restricts a string value to a specific set of values that describe address types associated with an interface. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="MIB_IPADDR_DELETED">
                              <xsd:annotation>
                                    <xsd:documentation>The address is being deleted.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="MIB_IPADDR_DISCONNECTED">
                              <xsd:annotation>
                                    <xsd:documentation>The address is on disconnected interface.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="MIB_IPADDR_DYNAMIC">
                              <xsd:annotation>
                                    <xsd:documentation>The stated address is a dynamic IP address.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="MIB_IPADDR_PRIMARY">
                              <xsd:annotation>
                                    <xsd:documentation>The stated address is a primary IP address.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="MIB_IPADDR_TRANSIENT">
                              <xsd:annotation>
                                    <xsd:documentation>The stated address is a transient address.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateAdstypeType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateAdstypeType complex type restricts a string value to a specific set of values that specify the different types of information that an active directory attribute can represents. For more information look at the ADSTYPEENUM enumeration defined by Microsoft. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="ADSTYPE_INVALID">
                              <xsd:annotation>
                                    <xsd:documentation>The data type is invalid.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_DN_STRING">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of Distinguished Name (path) of a directory service object.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_CASE_EXACT_STRING">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of the case-sensitive type.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_CASE_IGNORE_STRING">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of the case-insensitive type.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_PRINTABLE_STRING">
                              <xsd:annotation>
                                    <xsd:documentation>The string is displayable on screen or in print.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_NUMERIC_STRING">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of a numeral to be interpreted as text.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_BOOLEAN">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of a Boolean value.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_INTEGER">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of an integer value.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_OCTET_STRING">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of a byte array.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_UTC_TIME">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of the universal time as expressed in Universal Time Coordinate (UTC).</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_LARGE_INTEGER">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of a long integer value.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_PROV_SPECIFIC">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of a provider-specific string.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_OBJECT_CLASS">
                              <xsd:annotation>
                                    <xsd:documentation>Not used.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_CASEIGNORE_LIST">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of a list of case insensitive strings.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_OCTET_LIST">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of a list of octet strings.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_PATH">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of a directory path.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_POSTALADDRESS">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of the postal address type.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_TIMESTAMP">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of a time stamp in seconds.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_BACKLINK">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of a back link.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_TYPEDNAME">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of a typed name.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_HOLD">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of the Hold data structure.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_NETADDRESS">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of a net address.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_REPLICAPOINTER">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of a replica pointer.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_FAXNUMBER">
                              <xsd:annotation>
                                    <xsd:documentation>The string is of a fax number.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_EMAIL">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of an e-mail message.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_NT_SECURITY_DESCRIPTOR">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of Windows NT/Windows 2000 security descriptor as represented by a byte array.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_UNKNOWN">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of an undefined type.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_DN_WITH_BINARY">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of ADS_DN_WITH_BINARY used for mapping a distinguished name to a non varying GUID. </xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="ADSTYPE_DN_WITH_STRING">
                              <xsd:annotation>
                                    <xsd:documentation>The data is of ADS_DN_WITH_STRING used for mapping a distinguished name to a non-varying string value.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateAuditType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateAuditType complex type restricts a string value to a specific set of values: AUDIT_NONE, AUDIT_SUCCESS, AUDIT_FAILURE, and AUDIT_SUCCESS_FAILURE. These values describe which audit records should be generated. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="AUDIT_FAILURE"/>
                        <xsd:enumeration value="AUDIT_NONE"/>
                        <xsd:enumeration value="AUDIT_SUCCESS"/>
                        <xsd:enumeration value="AUDIT_SUCCESS_FAILURE"/>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateInterfaceTypeType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateInterfaceTypeType complex type restricts a string value to a specific set of values. These values describe the different interface types. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="MIB_IF_TYPE_ETHERNET"/>
                        <xsd:enumeration value="MIB_IF_TYPE_FDDI"/>
                        <xsd:enumeration value="MIB_IF_TYPE_LOOPBACK"/>
                        <xsd:enumeration value="MIB_IF_TYPE_OTHER"/>
                        <xsd:enumeration value="MIB_IF_TYPE_PPP"/>
                        <xsd:enumeration value="MIB_IF_TYPE_SLIP"/>
                        <xsd:enumeration value="MIB_IF_TYPE_TOKENRING"/>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateFileTypeType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateFileTypeType complex type restricts a string value to a specific set of values. These values describe the type of file being represented. For more information see the GetFileType and GetFileAttributesEx functions as defined by Microsoft. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="FILE_ATTRIBUTE_DIRECTORY">
                              <xsd:annotation>
                                    <xsd:documentation>The handle identifies a directory.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="FILE_TYPE_CHAR">
                              <xsd:annotation>
                                    <xsd:documentation>The specified file is a character file, typically an LPT device or a console.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="FILE_TYPE_DISK">
                              <xsd:annotation>
                                    <xsd:documentation>The specified file is a disk file.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="FILE_TYPE_PIPE">
                              <xsd:annotation>
                                    <xsd:documentation>The specified file is a socket, a named pipe, or an anonymous pipe.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="FILE_TYPE_REMOTE">
                              <xsd:annotation>
                                    <xsd:documentation>Unused.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="FILE_TYPE_UNKNOWN">
                              <xsd:annotation>
                                    <xsd:documentation>Either the type of the specified file is unknown, or the function failed.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityObjectNamingContextType">
            <xsd:annotation>
                  <xsd:documentation>The EntityObjectNamingContextType restricts a string value to a specific set of values: domain, configuration, and schema. These values describe the different default naming context found in active directory. A naming context is defined as a single object in the Directory Information Tree (DIT) along with every object in the tree subordinate to it. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityObjectStringType">
                        <xsd:enumeration value="domain"/>
                        <xsd:enumeration value="configuration"/>
                        <xsd:enumeration value="schema"/>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateNamingContextType">
            <xsd:annotation>
                  <xsd:documentation>The EntityObjectNamingContextType restricts a string value to a specific set of values: domain, configuration, and schema. These values describe the different default naming context found in active directory. A naming context is defined as a single object in the Directory Information Tree (DIT) along with every object in the tree subordinate to it. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="domain"/>
                        <xsd:enumeration value="configuration"/>
                        <xsd:enumeration value="schema"/>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityObjectProtocolType">
            <xsd:annotation>
                  <xsd:documentation>The EntityObjectProtocolType restricts a string value to a specific set of values: TCP and UDP. These values describe the different protocols available to a port. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityObjectStringType">
                        <xsd:enumeration value="TCP"/>
                        <xsd:enumeration value="UDP"/>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateProtocolType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateProtocolType restricts a string value to a specific set of values: TCP and UDP. These values describe the different protocols available to a port. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="TCP"/>
                        <xsd:enumeration value="UDP"/>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityObjectRegistryHiveType">
            <xsd:annotation>
                  <xsd:documentation>The EntityObjectRegistryHiveType restricts a string value to a specific set of values: HKEY_CLASSES_ROOT, HKEY_CURRENT_CONFIG, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, and HKEY_USERS. These values describe the possible hives in the registry. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityObjectStringType">
                        <xsd:enumeration value="HKEY_CLASSES_ROOT"/>
                        <xsd:enumeration value="HKEY_CURRENT_CONFIG"/>
                        <xsd:enumeration value="HKEY_CURRENT_USER"/>
                        <xsd:enumeration value="HKEY_LOCAL_MACHINE"/>
                        <xsd:enumeration value="HKEY_USERS"/>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateRegistryHiveType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateRegistryHiveType restricts a string value to a specific set of values: HKEY_CLASSES_ROOT, HKEY_CURRENT_CONFIG, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, and HKEY_USERS. These values describe the possible hives in the registry. The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="HKEY_CLASSES_ROOT"/>
                        <xsd:enumeration value="HKEY_CURRENT_CONFIG"/>
                        <xsd:enumeration value="HKEY_CURRENT_USER"/>
                        <xsd:enumeration value="HKEY_LOCAL_MACHINE"/>
                        <xsd:enumeration value="HKEY_USERS"/>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateRegistryTypeType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateRegistryTypeType complex type defines the different values that are valid for the type entity of a registry state. These values describe the possible types of data stored in a registry key. The empty string is also allowed as a valid value to support an empty element that is found when a variable reference is used within the type entity. Please note that the values identified are for the type entity and are not valid values for the datatype attribute. For information about how to encode registry data in OVAL for each of the different types, please visit the registry_state documentation.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="reg_binary">
                              <xsd:annotation>
                                    <xsd:documentation>The reg_binary type is used by registry keys that specify binary data in any form.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="reg_dword">
                              <xsd:annotation>
                                    <xsd:documentation>The reg_dword type is used by registry keys that specify a 32-bit number.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="reg_expand_sz">
                              <xsd:annotation>
                                    <xsd:documentation>The reg_expand_sz type is used by registry keys to specify a null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%").</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="reg_multi_sz">
                              <xsd:annotation>
                                    <xsd:documentation>The reg_multi_sz type is used by registry keys that specify an array of null-terminated strings, terminated by two null characters.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="reg_none">
                              <xsd:annotation>
                                    <xsd:documentation>The reg_none type is used by registry keys that have no defined value type.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="reg_qword">
                              <xsd:annotation>
                                    <xsd:documentation>The reg_qword type is used by registry keys that specify a 64-bit number.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="reg_sz">
                              <xsd:annotation>
                                    <xsd:documentation>The reg_sz type is used by registry keys that specify a single null-terminated string.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
      <xsd:complexType name="EntityStateSharedResourceTypeType">
            <xsd:annotation>
                  <xsd:documentation>The EntityStateSharedResourceTypeType complex type defines the different values that are valid for the type entity of a shared resource state. Note that the Windows API returns a DWOD and OVAL uses the constant name that is normally defined for these return values. This is done to increase readability and maintainability of OVAL Definitions. The empty string is also allowed as a valid value to support an empty element that is found when a variable reference is used within the type entity.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleContent>
                  <xsd:restriction base="oval-def:EntityStateStringType">
                        <xsd:enumeration value="STYPE_DISKTREE">
                              <xsd:annotation>
                                    <xsd:documentation>The STYPE_DISKTREE type means that the shared resource is a disk drive. The DWROD value this corresponds to is 0.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="STYPE_PRINTQ">
                              <xsd:annotation>
                                    <xsd:documentation>The STYPE_PRINTQ type means that the shared resource is a print queue. The DWROD value this corresponds to is 1.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="STYPE_DEVICE">
                              <xsd:annotation>
                                    <xsd:documentation>The STYPE_DEVICE type means that the shared resource is a communication device. The DWROD value this corresponds to is 2.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="STYPE_IPC">
                              <xsd:annotation>
                                    <xsd:documentation>The STYPE_IPC type means that the shared resource is an interprocess communication. The DWROD value this corresponds to is 3.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="STYPE_SPECIAL">
                              <xsd:annotation>
                                    <xsd:documentation>The STYPE_SPECIAL type means that this is a special share reserved for interprocess communication (IPC$) or remote administration of the server (ADMIN$). Can also refer to administrative shares such as C$, D$, E$, and so forth. The DWROD value this corresponds to is 0x40000000.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value="STYPE_TEMPORARY">
                              <xsd:annotation>
                                    <xsd:documentation>The STYPE_TEMPORARY type means that the shared resource is a temporary share. The DWROD value this corresponds to is 0x80000000.</xsd:documentation>
                              </xsd:annotation>
                        </xsd:enumeration>
                        <xsd:enumeration value=""/>
                  </xsd:restriction>
            </xsd:simpleContent>
      </xsd:complexType>
</xsd:schema>
